{"version":3,"sources":["State.ts","types.ts","Action.ts","components/DebugToolbar.tsx","components/MemoryCell.tsx","components/MemoryView.tsx","components/DebugView.tsx","components/OpcodeKeyboard.tsx","components/NumberKeyboard.tsx","currentOperandIsValid.ts","themes.ts","components/CodeView.tsx","components/EditorView.tsx","App.tsx","reducer.ts","serviceWorker.ts","index.tsx","../../marsjs/dist/mars.js","../../marsjs/dist/index.js","../../marsjs/dist/types.js","../../marsjs/dist/parser.js"],"names":["UIMode","initialState","props","code","i","push","Object","objectSpread","cursor","line","token","isMidOperand","memory","warriors","isPlaying","debugTicks","nextPC","uiMode","Editor","editingCode","viewingOwnCode","codeStringToCode","str","split","map","l","AddressingMode","Opcode","MathOperator","ActionType","addressingModeMap","$","Direct","#","Immediate","@","Indirect",">","Autodecrement","","addressingModeString","mode","_","invert","addressingModeValue","modeString","typeOpcodeAction","opcodeString","type","TypeOpcode","value","typeOperandModeAction","TypeOperandMode","typeOperandDigitAction","digit","TypeOperandDigit","toString","typeOperandLabelAction","label","TypeOperandLabel","nextWordAction","NextWord","undefined","setCursorAction","SetCursor","backspaceAction","Backspace","debugRestartAction","DebugRestart","debugUndoAction","DebugUndo","debugPauseAction","DebugPause","debugPlayAction","DebugPlay","debugNextAction","DebugNext","debugFastAction","DebugFast","switchToDebugAction","SwitchToDebug","switchToEditorAction","SwitchToEditor","toggleWhoseCodeAction","ToggleWhoseCode","DebugToolbar","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","restart","dispatch","undo","pause","next","console","log","assertThisInitialized","play","fast","inherits","createClass","key","react","className","style","textAlign","onClick","React","MemoryCell","owner","isPC","isNext","instruction","classes","classNames","memory-cell","warrior-1","warrior-2","pc","strings","printOpcode","printOperandA","printOperandB","unshift","text","t","MemoryView","cells","m","idx","find","w","includes","DebugView","switchToEditor","MemoryView_MemoryView","id","DebugToolbar_DebugToolbar","OpcodeKeyboard","currentSpacer","makeOpcodeButton","o","onKeyPress","rows","opcodes","index","buttons","onNext","onBackspace","NumberKeyboard","leftKeys","numberKeys","k","canAddAddressingMode","disabled","canNext","isEndOfLine","currentOperandIsValid","state","operand","isNumber","num","parseInt","isValidMath","eq","rest","slice","operandIsValid","Bim","color1","color2","color3","color4","color5","color6","color7","color8","CodeView","codeLines","lineSelected","currentLine","currentToken","tokens","ti","selected","tokenClasses","opcode","operand-1","operand-2","empty","isUndefined","color","backgroundColor","e","onTokenClick","stopPropagation","klass","current-line","onLineClick","background","EditorView","switchToDebug","codeIsValid","showOtherCode","clickLine","clickToken","typeOpcode","typeDigitOrMode","d","action","didTypeBackspace","keyboard","_this$props","isOwnCode","otherLabel","valid","vampire","bomb","App","reducer","timer","setState","_createReducerAndStat","rawCode","enemyCode","size","programs","generatePrograms","playerCode","parse","vm","VM","cloneDeep","otherCode","s","debugStartPositions","equs","newState","tick","winner","result","indexOf","youWon","alert","print","playRate","join","codeToString","Debug","createReducerAndState","_this2","setTimeout","react_default","a","createElement","EditorView_EditorView","DebugView_DebugView","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__assign","assign","n","p","prototype","hasOwnProperty","defineProperty","exports","types_1","__webpack_require__","cycleLimit","startPositions","cycles","nextProgramIndex","labels","positions","emptyInstruction","DAT","aMode","aField","bMode","bField","maybePositions","findStartPositions","program","start","indexOffset","j","absoluteAddr","normalizedIndex","END","EQU","number","warrior","execute","aliveWarriors","filter","output","_i","_a","instr","printInstruction","totalProgramSize","flatten","desiredGap","Math","floor","startingPosition","random","shift","aAddr","evaluateOperand","bAddr","b","shouldIncrement","ADD","evaluateField","CMP","DJN","MOV","JMP","JMZ","SPL","SLT","SUB","field","evaluatedField","operator","left","right","Add","Subtract","Multiply","Divide","newIndex","printOperand","addressingModeAsString","printOperandVal","mathOperatorAsString","__export","parser_1","mars_1","instructionToString","ohm","grammar","semantics","createSemantics","parsed","asMarsJSObject","addOperation","Program","instructions","children","Instruction_label","comment","aResult","bResult","addressingMode","c","Instruction_nolabel","Instruction_commentonly","Operand","operandValue","<","sourceString","OperandValue","AddExp","AddExp_plus","AddExp_minus","MulExp_times","MulExp_divide","operandLiteral","_opcode","toUpperCase","minus","_label","_comment"],"mappings":"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","file":"static/js/main.17c07d54.chunk.js","sourcesContent":["import { Line } from \"./Line\";\nimport { Instruction, Warrior } from \"corewars-js\";\n\nexport interface State {\n  code: Line[];\n  cursor: CursorPosition;\n  memory: Instruction[];\n\n  warriors: Warrior[];\n\n  isPlaying: boolean;\n  winner?: number; // TODO: This suggests we need a richer 'warrior' data structure with metadata\n  playRate?: number;\n  debugTicks: number;\n  debugStartPositions?: number[];\n  nextPC: number;\n\n  uiMode: UIMode;\n\n  /** If false, show the other code */\n  editingCode: Line[];\n  viewingOwnCode: boolean;\n}\n\nexport enum UIMode {\n  Debug,\n  Editor\n}\n\nexport const initialState = (props?: Partial<State>): State => {\n  const code = [];\n  for (let i = 0; i < 10; i++) {\n    code.push([]);\n  }\n  return {\n    code,\n    cursor: { line: 0, token: 0, isMidOperand: false },\n    memory: [],\n    warriors: [],\n    isPlaying: false,\n    debugTicks: 0,\n    nextPC: 0,\n    uiMode: UIMode.Editor,\n    editingCode: [],\n    viewingOwnCode: true,\n    ...props\n  };\n};\n\nexport interface CursorPosition {\n  line: number;\n  token: number;\n  isMidOperand: boolean;\n}\n\nexport function codeStringToCode(str: string): Line[] {\n  return str.split(\"\\n\").map(l => l.split(\" \"));\n}\n\nexport function codeToString(code: Line[]): string {\n  return code.map(l => l.join(\" \")).join(\"\\n\");\n}\n","import _ from \"lodash\";\n\n// Taken from marsjs. We'll eventually want to properly load that in.\n\nexport enum AddressingMode {\n  Immediate,\n  Direct,\n  Indirect,\n  Autodecrement // TODO: Distinguish between 86 and 88 (and 94?)\n}\n\nconst addressingModeMap: { [s: string]: AddressingMode } = {\n  $: AddressingMode.Direct,\n  \"#\": AddressingMode.Immediate,\n  \"@\": AddressingMode.Indirect,\n  \">\": AddressingMode.Autodecrement,\n  \"\": AddressingMode.Direct\n};\n\nexport function addressingModeString(mode: AddressingMode) {\n  return _.invert(addressingModeMap)[mode] || \"\";\n}\n\nexport function addressingModeValue(modeString: string): number {\n  return addressingModeMap[modeString];\n}\n\nexport enum Opcode {\n  DAT,\n  MOV,\n\n  ADD,\n  SUB,\n\n  JMZ,\n  JMN,\n  JMP,\n\n  DJN,\n  CMP,\n  SLT,\n\n  SPL,\n\n  EQU,\n  END\n}\n\nexport enum MathOperator {\n  Add,\n  Divide,\n  Subtract,\n  Multiply\n}\n\nexport interface MathExpression {\n  left: string | number | MathExpression;\n  right: string | number | MathExpression;\n  operator: MathOperator;\n}\n\nexport interface Instruction {\n  opcode: Opcode;\n  label?: string;\n  comment?: string;\n\n  aMode: AddressingMode;\n  aField: number; // TODO: Not really a number!\n\n  bMode: AddressingMode;\n  bField: number; // TODO: Not really a number!\n}\n\nexport interface Warrior {\n  number: number;\n  pc: number[];\n}\n","import { AddressingMode, addressingModeString } from \"./types\";\nimport { CursorPosition } from \"./State\";\n\nexport enum ActionType {\n  NextWord,\n  TypeOpcode,\n  TypeOperandDigit,\n  TypeOperandMode,\n  TypeOperandLabel,\n  SetCursor,\n  Backspace,\n\n  DebugRestart,\n  DebugUndo,\n  DebugPause,\n  DebugNext,\n  DebugPlay,\n  DebugFast,\n\n  SwitchToDebug,\n  SwitchToEditor,\n  ToggleWhoseCode\n}\n\nexport interface Action<T> {\n  type: ActionType;\n  value: T;\n}\n\nexport const typeOpcodeAction = (opcodeString: string): Action<string> => {\n  return {\n    type: ActionType.TypeOpcode,\n    value: opcodeString\n  };\n};\n\nexport const typeOperandModeAction = (mode: AddressingMode): Action<string> => {\n  return {\n    type: ActionType.TypeOperandMode,\n    value: addressingModeString(mode)\n  };\n};\n\nexport const typeOperandDigitAction = (digit: number): Action<string> => {\n  return {\n    type: ActionType.TypeOperandDigit,\n    value: digit.toString()\n  };\n};\n\nexport const typeOperandLabelAction = (label: string): Action<string> => {\n  return {\n    type: ActionType.TypeOperandLabel,\n    value: label.toString()\n  };\n};\n\nexport const nextWordAction = (): Action<undefined> => {\n  return {\n    type: ActionType.NextWord,\n    value: undefined\n  };\n};\n\nexport const setCursorAction = (\n  line: number,\n  token: number\n): Action<CursorPosition> => {\n  return {\n    type: ActionType.SetCursor,\n    value: { line, token, isMidOperand: false }\n  };\n};\n\nexport const backspaceAction = (): Action<undefined> => {\n  return {\n    type: ActionType.Backspace,\n    value: undefined\n  };\n};\n\nexport const debugRestartAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugRestart,\n    value: undefined\n  };\n};\n\nexport const debugUndoAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugUndo,\n    value: undefined\n  };\n};\n\nexport const debugPauseAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugPause,\n    value: undefined\n  };\n};\n\nexport const debugPlayAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugPlay,\n    value: undefined\n  };\n};\n\nexport const debugNextAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugNext,\n    value: undefined\n  };\n};\n\nexport const debugFastAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugFast,\n    value: undefined\n  };\n};\n\nexport const switchToDebugAction = (): Action<undefined> => {\n  return {\n    type: ActionType.SwitchToDebug,\n    value: undefined\n  };\n};\n\nexport const switchToEditorAction = (): Action<undefined> => {\n  return {\n    type: ActionType.SwitchToEditor,\n    value: undefined\n  };\n};\n\nexport const toggleWhoseCodeAction = (): Action<undefined> => {\n  return {\n    type: ActionType.ToggleWhoseCode,\n    value: undefined\n  };\n};\n","import * as React from \"react\";\nimport { Dispatch } from \"../reducer\";\nimport {\n  debugRestartAction,\n  debugUndoAction,\n  debugPauseAction,\n  debugNextAction,\n  debugPlayAction,\n  debugFastAction\n} from \"../Action\";\n\nimport \"../debugToolbar.css\";\n\ninterface Props {\n  dispatch: Dispatch;\n}\n\nexport class DebugToolbar extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div\n        className=\"debug-toolbar\"\n        style={{\n          textAlign: \"center\"\n        }}\n      >\n        <button onClick={this.restart}>{\"<<<\"}</button>\n        <button onClick={this.undo}>{\"<\"}</button>\n        <button onClick={this.pause}>||</button>\n        <button onClick={this.next}>></button>\n        <button onClick={this.play}>>></button>\n        <button onClick={this.fast}>>>></button>\n      </div>\n    );\n  }\n\n  restart = () => {\n    this.props.dispatch(debugRestartAction());\n  };\n\n  undo = () => {\n    this.props.dispatch(debugUndoAction());\n  };\n\n  pause = () => {\n    this.props.dispatch(debugPauseAction());\n  };\n\n  next = () => {\n    console.log(\"In next\", this);\n    this.props.dispatch(debugNextAction());\n  };\n\n  play = () => {\n    this.props.dispatch(debugPlayAction());\n  };\n\n  fast = () => {\n    this.props.dispatch(debugFastAction());\n  };\n}\n","import * as React from \"react\";\nimport classNames from \"classnames\";\nimport { Instruction } from \"corewars-js\";\nimport {\n  printOpcode,\n  printOperandA,\n  printOperandB\n} from \"corewars-js/dist/mars\";\n\ninterface Props {\n  instruction: Instruction;\n  owner?: number;\n  isPC: boolean;\n  isNext: boolean;\n}\n\nexport function MemoryCell(props: Props) {\n  const { owner, isPC, isNext, instruction } = props;\n\n  const classes = classNames({\n    \"memory-cell\": true,\n    \"warrior-1\": owner === 0,\n    \"warrior-2\": owner === 1,\n    pc: isPC,\n    next: isNext\n  });\n\n  let strings = [\n    printOpcode(instruction),\n    printOperandA(instruction),\n    printOperandB(instruction)\n  ];\n  if (instruction.label) {\n    strings.unshift(instruction.label);\n  }\n\n  const text = strings.map(t => {\n    return <div>{t}</div>;\n  });\n\n  return <div className={classes}>{text}</div>;\n}\n","import * as React from \"react\";\nimport { Instruction, Warrior } from \"corewars-js\";\nimport { MemoryCell } from \"./MemoryCell\";\nimport _ from \"lodash\";\nimport \"../memoryView.css\";\n\ninterface Props {\n  memory: Instruction[];\n  warriors: Warrior[];\n  nextPC: number;\n}\n\nexport class MemoryView extends React.Component<Props, {}> {\n  render() {\n    const cells = this.props.memory.map((m, idx) => {\n      const isPC = !!this.props.warriors.find(w => _.includes(w.pc, idx));\n      const isNext = idx === this.props.nextPC;\n      return (\n        <MemoryCell\n          owner={m.owner}\n          isPC={isPC}\n          isNext={isNext}\n          key={`memory-${idx}`}\n          instruction={m}\n        />\n      );\n    });\n\n    return <div className=\"memory-view\">{cells}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { Dispatch } from \"../reducer\";\nimport { Line } from \"../Line\";\nimport { DebugToolbar } from \"./DebugToolbar\";\nimport { MemoryView } from \"./MemoryView\";\nimport { Instruction, Warrior } from \"corewars-js\";\n\nimport \"../debugView.css\";\nimport { switchToEditorAction } from \"../Action\";\n\ninterface Props {\n  code: Line[];\n  dispatch: Dispatch;\n  memory: Instruction[];\n  warriors: Warrior[];\n  nextPC: number;\n}\n\nexport class DebugView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div className=\"debug\">\n        <MemoryView\n          memory={this.props.memory}\n          warriors={this.props.warriors}\n          nextPC={this.props.nextPC}\n        />\n        <button onClick={this.switchToEditor} id=\"show-editor\">\n          edit\n        </button>\n        <div id=\"logo\">omega</div>\n        <DebugToolbar dispatch={this.props.dispatch} />\n      </div>\n    );\n  }\n  switchToEditor = () => {\n    this.props.dispatch(switchToEditorAction());\n  };\n}\n","import * as React from \"react\";\n\ninterface Props {\n  onKeyPress: (opcode: string) => void;\n  onBackspace: () => void;\n  onNext: () => void;\n}\n\nexport default function(props: Props) {\n  const makeOpcodeRow = (opcodes: string[], index: number) => {\n    const buttons = opcodes.map(makeOpcodeButton);\n    return (\n      <div className=\"opcode-row\" key={`opcode-row-${index}`}>\n        {buttons}\n      </div>\n    );\n  };\n\n  let currentSpacer = 0;\n\n  const makeOpcodeButton = (o: string) => {\n    if (o === \"spacer\") {\n      currentSpacer += 1;\n      return <div className=\"spacer\" key={`spacer-${currentSpacer}`} />;\n    }\n\n    return (\n      <button\n        key={`key-${o}`}\n        className=\"opcode\"\n        onClick={() => props.onKeyPress(o)}\n      >\n        {o}\n      </button>\n    );\n  };\n\n  const rows = [\n    [\"DAT\", \"MOV\", \"spacer\", \"ADD\", \"SUB\", \"spacer\", \"SPL\"],\n    [\"JMZ\", \"JMN\", \"JMP\"],\n    [\"DJN\", \"CMP\", \"SLT\"]\n  ].map(makeOpcodeRow);\n\n  return (\n    <div className=\"opcode keyboard\">\n      <div className=\"opcodes\">{rows}</div>\n      <button key=\"next\" id=\"next-key\" onClick={props.onNext}>\n        space\n      </button>\n      <button key=\"backspace\" id=\"backspace-key\" onClick={props.onBackspace}>\n        del\n      </button>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\ninterface Props {\n  canAddAddressingMode: boolean;\n  canNext: boolean;\n  onKeyPress: (number: string) => void;\n  onNext: () => void;\n  onBackspace: () => void;\n  isEndOfLine: boolean;\n}\n\nexport default function(props: Props) {\n  const numberKeys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map(k => {\n    return (\n      <button\n        key={`key-${k}`}\n        id={`numkey-${k}`}\n        className=\"number\"\n        onClick={() => props.onKeyPress(k.toString())}\n      >\n        {k}\n      </button>\n    );\n  });\n\n  let leftKeys;\n\n  if (props.canAddAddressingMode) {\n    leftKeys = [\"#\", \"@\", \">\", \"-\"].map(k => {\n      return (\n        <button\n          key={`key-${k}`}\n          className=\"addressingMode\"\n          disabled={!props.canAddAddressingMode}\n          onClick={() => props.onKeyPress(k.toString())}\n        >\n          {k}\n        </button>\n      );\n    });\n  } else {\n    leftKeys = [\"/\", \"*\", \"+\", \"-\"].map(k => {\n      return (\n        <button\n          key={`key-${k}`}\n          className=\"addressingMode\"\n          disabled={k !== \"-\" && props.canAddAddressingMode}\n          onClick={() => props.onKeyPress(k)}\n        >\n          {k}\n        </button>\n      );\n    });\n  }\n\n  return (\n    <div className=\"keyboard number\">\n      <div className=\"leftKeys\">{leftKeys}</div>\n      <div className=\"numbers\">{numberKeys}</div>\n      <button\n        key=\"done\"\n        id=\"next-key\"\n        disabled={!props.canNext}\n        onClick={() => props.onNext()}\n      >\n        {props.isEndOfLine ? \"return\" : \",\"}\n      </button>\n      <button\n        key=\"backspace\"\n        id=\"backspace-key\"\n        onClick={() => props.onBackspace()}\n      >\n        del\n      </button>\n    </div>\n  );\n}\n","import { CursorPosition } from \"./State\";\nimport { addressingModeValue } from \"./types\";\nimport { Line } from \"./Line\";\n\nexport function currentOperandIsValid(state: {\n  code: Line[];\n  cursor: CursorPosition;\n}): boolean {\n  const operand = state.code[state.cursor.line][state.cursor.token];\n  if (!operand) return false;\n\n  return operandIsValid(operand);\n}\n\nexport function operandIsValid(operand: string): boolean {\n  const isNumber = (num: string) => parseInt(num).toString() === num;\n  const isValidMath = (eq: string) => {\n    if (!(isNumber(eq[0]) || eq[0] === \"-\")) return false;\n    if (!isNumber(eq[eq.length - 1])) return false;\n    return true;\n  };\n\n  if (isNumber(operand) || isValidMath(operand)) {\n    return true;\n  }\n\n  const addressingMode = addressingModeValue(operand[0]);\n  if (addressingMode) {\n    const rest = operand.slice(1);\n    return isNumber(rest) || isValidMath(rest);\n  }\n\n  return true;\n}\n","interface Palette {\n  color1: string;\n  color2: string;\n  color3: string;\n  color4: string;\n  color5: string;\n  color6: string;\n  color7: string;\n  color8: string;\n}\n\nexport interface Theme {\n  bgColor: string;\n  fgColor: string;\n  normal: Palette;\n  bold: Palette;\n}\n\nexport const Bim: Theme = {\n  bgColor: \"#012849\",\n  fgColor: \"#a9bed8\",\n  normal: {\n    color1: \"#2c2423\",\n    color2: \"#f557a0\",\n    color3: \"#a9ee55\",\n    color4: \"#f5a255\",\n    color5: \"#5ea2ec\",\n    color6: \"#a957ec\",\n    color7: \"#5eeea0\",\n    color8: \"#918988\"\n  },\n  bold: {\n    color1: \"#918988\",\n    color2: \"#f579b2\",\n    color3: \"#bbee78\",\n    color4: \"#f5b378\",\n    color5: \"#81b3ec\",\n    color6: \"#bb79ec\",\n    color7: \"#81eeb2\",\n    color8: \"#f5eeec\"\n  }\n};\n","import * as React from \"react\";\nimport { Line } from \"../Line\";\nimport classNames from \"classnames\";\nimport _ from \"lodash\";\nimport { Bim } from \"../themes\";\n\nimport \"../crt.css\";\n\ninterface Props {\n  code: Line[];\n  currentLine: number;\n  currentToken: number;\n  onLineClick?: (line: number) => void;\n  onTokenClick?: (line: number, token: number) => void;\n}\n\nexport default function(props: Props) {\n  const codeLines = props.code.map((l, i) => {\n    const lineSelected = i === props.currentLine && props.currentToken === -1;\n\n    const tokens = l.map((t, ti) => {\n      const selected = i === props.currentLine && ti === props.currentToken;\n      const tokenClasses = classNames(\"token\", {\n        opcode: ti === 0,\n        \"operand-1\": ti === 1,\n        \"operand-2\": ti === 2,\n        selected,\n        operand: ti !== 0,\n        empty: _.isUndefined(t)\n      });\n\n      const style: React.CSSProperties = {};\n      style.color = Bim.bold.color1;\n\n      if (selected || lineSelected) {\n        style.backgroundColor = Bim.fgColor;\n        style.color = Bim.bgColor;\n      }\n\n      return (\n        <span\n          className={tokenClasses}\n          key={`token-${i}-${ti}`}\n          onClick={(e: any) => {\n            props.onTokenClick && props.onTokenClick(i, ti);\n            e.stopPropagation();\n          }}\n          style={style}\n        >\n          {t}\n        </span>\n      );\n    });\n\n    const klass = classNames(\"code-line\", {\n      \"current-line\": i === props.currentLine\n    });\n\n    return (\n      <div\n        className={klass}\n        key={`line-${i}`}\n        onClick={() => props.onLineClick && props.onLineClick(i)}\n        style={{\n          backgroundColor: lineSelected ? Bim.fgColor : Bim.bgColor,\n          color: Bim.fgColor\n        }}\n      >\n        <span\n          className=\"line-num relative\"\n          style={{ backgroundColor: Bim.bold.color1 }}\n        >\n          {i - props.currentLine}\n        </span>\n        <span className=\"code-instruction\">{tokens}</span>\n      </div>\n    );\n  });\n  return (\n    <div className=\"container\">\n      <div\n        className=\"code-box crt\"\n        style={{\n          background: `linear-gradient(to right, ${Bim.bold.color1} 40px, ${\n            Bim.bgColor\n          } 40px)`\n        }}\n      >\n        {codeLines}\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport OpcodeKeyboard from \"./OpcodeKeyboard\";\nimport NumberKeyboard from \"./NumberKeyboard\";\nimport _ from \"lodash\";\nimport { currentOperandIsValid } from \"../currentOperandIsValid\";\nimport CodeView from \"./CodeView\";\nimport { Dispatch } from \"../reducer\";\nimport {\n  setCursorAction,\n  typeOpcodeAction,\n  Action,\n  typeOperandDigitAction,\n  typeOperandModeAction,\n  typeOperandLabelAction,\n  nextWordAction,\n  backspaceAction,\n  switchToDebugAction,\n  toggleWhoseCodeAction\n} from \"../Action\";\nimport { addressingModeValue } from \"../types\";\nimport { CursorPosition } from \"../State\";\nimport { Line } from \"../Line\";\n\ninterface Props {\n  cursor: CursorPosition;\n  code: Line[];\n  dispatch: Dispatch;\n  isOwnCode: boolean;\n}\n\nexport class EditorView extends React.Component<Props, {}> {\n  render() {\n    const { cursor, code, isOwnCode } = this.props;\n\n    let keyboard;\n    if (cursor.token === 0 || cursor.token === -1) {\n      keyboard = (\n        <OpcodeKeyboard\n          onKeyPress={this.typeOpcode}\n          onNext={this.next}\n          onBackspace={this.didTypeBackspace}\n        />\n      );\n    } else {\n      keyboard = (\n        <NumberKeyboard\n          onKeyPress={this.typeDigitOrMode}\n          onBackspace={this.didTypeBackspace}\n          onNext={this.next}\n          canAddAddressingMode={!cursor.isMidOperand}\n          canNext={currentOperandIsValid(this.props)}\n          isEndOfLine={cursor.token === 2}\n        />\n      );\n    }\n\n    const otherLabel = isOwnCode ? \"enemy code\" : \"my code\";\n\n    const valid = this.codeIsValid();\n\n    return (\n      <div className=\"editor\">\n        <CodeView\n          code={code}\n          currentLine={cursor.line}\n          currentToken={cursor.token}\n          onLineClick={this.clickLine}\n          onTokenClick={this.clickToken}\n        />\n        <button\n          onClick={this.switchToDebug}\n          className={valid ? \"\" : \"disabled\"}\n          id=\"show-debug\"\n        >\n          debug\n        </button>\n        <button onClick={this.showOtherCode} id=\"show-other\">\n          {otherLabel}\n        </button>\n        <div id=\"logo\">omega</div>\n        {isOwnCode ? keyboard : undefined}\n      </div>\n    );\n  }\n\n  switchToDebug = () => {\n    if (!this.codeIsValid()) return;\n    this.props.dispatch(switchToDebugAction());\n  };\n\n  showOtherCode = () => {\n    this.props.dispatch(toggleWhoseCodeAction());\n  };\n\n  clickLine = (line: number) => {\n    this.props.dispatch(setCursorAction(line, -1));\n  };\n\n  clickToken = (line: number, token: number) => {\n    console.log(\"Click token\");\n    this.props.dispatch(setCursorAction(line, token));\n  };\n\n  typeOpcode = (k: string) => {\n    this.props.dispatch(typeOpcodeAction(k));\n  };\n\n  typeDigitOrMode = (d: string) => {\n    // '-' isn't an addressing mode, but our term 'mode' here is wrong\n    // It really just means \"a non-digit symbol that isn't a label or math that can be at the start of an operand\"\n    let action: Action<string>;\n    if (parseInt(d, 10).toString() === d) {\n      action = typeOperandDigitAction(parseInt(d));\n    } else if (!_.isUndefined(addressingModeValue(d))) {\n      action = typeOperandModeAction(addressingModeValue(d));\n    } else if (d === \"-\") {\n      action = typeOperandLabelAction(d);\n    } else {\n      action = typeOperandLabelAction(d);\n    }\n    // TODO: Math\n\n    this.props.dispatch(action);\n  };\n\n  next = () => {\n    this.props.dispatch(nextWordAction());\n  };\n\n  didTypeBackspace = () => {\n    this.props.dispatch(backspaceAction());\n  };\n\n  // TODO: This might get more complicated, should probably be extracted somewhere\n  codeIsValid = (): boolean => {\n    // Make sure there are no missing holes\n    const invalid = this.props.code.find(l => {\n      return (l.length > 0 && _.isUndefined(l[0])) || _.isUndefined(l[1]);\n    });\n    if (invalid) return false;\n    return true;\n  };\n}\n","import React, { Reducer } from \"react\";\nimport \"./App.css\";\nimport { Dispatch, createReducerAndState } from \"./reducer\";\nimport { State, UIMode } from \"./State\";\nimport { Action, debugNextAction } from \"./Action\";\nimport { DebugView } from \"./components/DebugView\";\nimport { EditorView } from \"./components/EditorView\";\n\n// const program = \"MOV 0, 1\";\n\n// TODO: EQU needs to not occupy memory space.\n// Then, MOV ptr, ptr and ADD #const, ptr are something to debug.\n\n// const program = `const EQU 2365\n// loc MOV ptr, ptr\n// ADD #const, ptr\n// SUB #const, loc\n// JMP loc\n// ptr JMP @0, trap\n// trap SPL 1, -100\n// MOV bomb, <-1\n// JMP trap\n// bomb DAT #0`;\n\nconst vampire = `const EQU 2365\nloc MOV ptr, ptr\nADD #const, ptr\nSUB #const, loc\nJMP loc\nptr JMP @0, trap\ntrap SPL 1, -100\nMOV bomb, <-1\nJMP trap\nbomb DAT #0`;\n\n// const imp = \"MOV 0, 1\";\n\nconst bomb = `ADD #4, 3\nMOV 2, @2\nJMP -2\nDAT #0, #0`;\n\n// const program = `DAT 0\n// DAT 99\n// MOV @-2, @-1\n// CMP -3,\t#9\n// JMP 4\n// ADD #1, -5\n// ADD #1, -5\n// JMP -5\n// MOV #99, 93\n// JMP 93\n\n// END\tstart`;\n\nclass App extends React.Component<{}, State> {\n  state: State;\n  reducer: Reducer<State, Action<any>>;\n\n  timer?: number;\n\n  constructor(props: {}) {\n    super(props);\n\n    const { state, reducer } = createReducerAndState(bomb, vampire);\n    this.state = state;\n    this.reducer = reducer;\n  }\n\n  componentDidUpdate() {\n    if (this.state.isPlaying && !this.timer) {\n      const tick = () => {\n        this.dispatch(debugNextAction());\n\n        if (this.state.isPlaying && this.state.playRate) {\n          this.timer = (setTimeout(\n            tick,\n            this.state.playRate\n          ) as unknown) as number;\n        } else {\n          this.timer = undefined;\n        }\n      };\n      tick();\n    }\n  }\n\n  render() {\n    if (this.state.uiMode === UIMode.Editor) {\n      return (\n        <EditorView\n          dispatch={this.dispatch}\n          code={this.state.editingCode}\n          cursor={this.state.cursor}\n          isOwnCode={this.state.viewingOwnCode}\n        />\n      );\n    } else if (this.state.uiMode === UIMode.Debug) {\n      return (\n        <DebugView\n          code={this.state.code}\n          dispatch={this.dispatch}\n          memory={this.state.memory}\n          warriors={this.state.warriors}\n          nextPC={this.state.nextPC}\n        />\n      );\n    } else {\n      console.log(`Unknown UI mode: ${this.state.uiMode}`);\n      return <div />;\n    }\n  }\n\n  dispatch: Dispatch = (action: Action<any>) => {\n    console.log(\"Dispatching\", action);\n    this.setState(this.reducer(this.state, action));\n  };\n}\n\nexport default App;\n","import {\n  State,\n  initialState,\n  codeStringToCode,\n  UIMode,\n  codeToString\n} from \"./State\";\nimport { Action, ActionType, debugRestartAction } from \"./Action\";\nimport _ from \"lodash\";\nimport { Reducer } from \"react\";\nimport { Instruction, VM, parse } from \"corewars-js\";\n\nexport type Dispatch = (action: Action<any>) => void;\n\ninterface ReducerAndState {\n  state: State;\n  reducer: Reducer<State, Action<any>>;\n}\n\nexport function createReducerAndState(\n  rawCode: string,\n  enemyCode: string,\n  size: number = 80\n): ReducerAndState {\n  // TODO: Should this live in State instead of this closure?\n  let programs: Instruction[][] = [];\n\n  const generatePrograms = (playerCode: string) => {\n    console.log(playerCode);\n    console.log(\"---\");\n    console.log(enemyCode);\n    programs = [playerCode, enemyCode].map(parse);\n  };\n\n  generatePrograms(rawCode);\n\n  let vm = new VM(_.cloneDeep(programs), size);\n\n  const code = codeStringToCode(rawCode);\n  const otherCode = codeStringToCode(enemyCode);\n\n  const s = initialState({\n    code,\n    editingCode: code,\n    viewingOwnCode: true,\n    memory: vm.memory,\n    warriors: vm.warriors,\n    debugStartPositions: vm.warriors.map(w => w.pc[0]),\n    nextPC: vm.warriors[0].pc[0]\n  });\n\n  console.log(vm.equs);\n\n  const reducer = (state: State, action: Action<any>): State => {\n    const newState = _.cloneDeep(state);\n\n    const { cursor, code } = newState;\n    const line = code[cursor.line] || [];\n\n    if (action.type === ActionType.TypeOpcode) {\n      if (cursor.token > 0) {\n        return state;\n      }\n\n      if (cursor.token === -1) {\n        newState.code[cursor.line] = [action.value];\n      } else {\n        line[0] = action.value;\n      }\n\n      cursor.token = 1;\n      cursor.isMidOperand = false;\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandDigit) {\n      if (cursor.token !== 1 && cursor.token !== 2) {\n        return state;\n      }\n\n      if (!line) return state;\n\n      if (cursor.isMidOperand) {\n        // If you JUST typed in this operand, keep going\n        line[cursor.token] = (line[cursor.token] || \"\") + action.value;\n      } else {\n        // Otherwise, overwrite the whole operand\n        line[cursor.token] = action.value;\n        cursor.isMidOperand = true;\n      }\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandLabel) {\n      if (cursor.token !== 1 && cursor.token !== 2) {\n        return state;\n      }\n      if (!line) return state;\n\n      // TODO: This should probably be a discrete action\n      if (action.value === \"-\" && !cursor.isMidOperand) {\n        line[cursor.token] = action.value;\n        cursor.isMidOperand = true;\n      } else if (cursor.isMidOperand) {\n        line[cursor.token] = (line[cursor.token] || \"\") + action.value;\n        cursor.isMidOperand = true;\n      }\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandMode) {\n      if (cursor.token !== 1 && cursor.token !== 2) {\n        return state;\n      }\n      if (!line) return state;\n      if (cursor.isMidOperand) return state;\n      line[cursor.token] = action.value;\n      cursor.isMidOperand = true;\n\n      return newState;\n    } else if (action.type === ActionType.NextWord) {\n      cursor.isMidOperand = false;\n\n      if (line[cursor.token]) {\n        if (cursor.token === 1) {\n          line[cursor.token] += \",\";\n          cursor.token = 2;\n          return newState;\n        } else if (cursor.token === 2) {\n          cursor.token = 0;\n          cursor.line = cursor.line + 1;\n\n          if (!code[cursor.line]) {\n            code.push([]);\n          }\n\n          return newState;\n        }\n      }\n      return state;\n    } else if (action.type === ActionType.SetCursor) {\n      newState.cursor = action.value;\n      return newState;\n    } else if (action.type === ActionType.Backspace) {\n      const token = line[cursor.token];\n\n      if (cursor.token === 0) {\n        // Opcode\n        if (_.isUndefined(token)) {\n          if (cursor.line >= 0) {\n            cursor.line -= 1;\n            cursor.token = 2;\n          }\n        } else {\n          line[cursor.token] = undefined;\n        }\n        return newState;\n      } else {\n        // Operand\n        if (_.isUndefined(token)) {\n          cursor.token -= 1;\n        } else if (cursor.isMidOperand && token.length > 1) {\n          line[cursor.token] = token.slice(0, token.length - 1);\n        } else {\n          line[cursor.token] = undefined;\n        }\n        return newState;\n      }\n    }\n\n    // Debugger actions\n    if (action.type === ActionType.DebugRestart) {\n      vm = new VM(_.cloneDeep(programs), size);\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n      newState.debugTicks = 0;\n      newState.debugStartPositions = vm.warriors.map(w => w.pc[0]);\n\n      return newState;\n    } else if (action.type === ActionType.DebugUndo) {\n      vm = new VM(\n        _.cloneDeep(programs),\n        size,\n        undefined,\n        newState.debugStartPositions\n      );\n\n      let nextPC: number = 0;\n      for (let i = 0; i < state.debugTicks - 1; i++) {\n        nextPC = vm.tick() || nextPC;\n      }\n\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n      newState.winner = undefined;\n      newState.debugTicks = state.debugTicks - 1;\n      newState.nextPC = nextPC;\n      return newState;\n    } else if (action.type === ActionType.DebugPause) {\n      newState.isPlaying = false;\n      return newState;\n    } else if (action.type === ActionType.DebugNext) {\n      if (!_.isUndefined(state.winner)) {\n        console.log(\"Can't continue, game is over\");\n        return state;\n      }\n\n      const result = vm.tick();\n      if (_.isUndefined(result)) {\n        newState.winner = _.indexOf(vm.warriors, vm.winner());\n        newState.isPlaying = false;\n\n        const youWon = newState.winner === 0;\n        const text = youWon ? \"You won!\" : \"You lost.\";\n        alert(text);\n\n        return newState;\n      }\n\n      newState.nextPC = result;\n      console.log(vm.print());\n\n      newState.debugTicks += 1;\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n\n      return newState;\n    } else if (action.type === ActionType.DebugPlay) {\n      newState.isPlaying = true;\n      newState.playRate = 100;\n      return newState;\n    } else if (action.type === ActionType.DebugFast) {\n      newState.isPlaying = true;\n      newState.playRate = 5;\n      return newState;\n    } else if (action.type === ActionType.SwitchToDebug) {\n      generatePrograms(codeToString(state.code));\n      newState.uiMode = UIMode.Debug;\n      return reducer(newState, debugRestartAction());\n    } else if (action.type === ActionType.SwitchToEditor) {\n      newState.uiMode = UIMode.Editor;\n      return newState;\n    } else if (action.type === ActionType.ToggleWhoseCode) {\n      if (newState.viewingOwnCode) {\n        newState.editingCode = otherCode;\n      } else {\n        newState.editingCode = newState.code;\n      }\n\n      newState.cursor = {\n        line: 0,\n        token: 0,\n        isMidOperand: false\n      };\n\n      newState.viewingOwnCode = !newState.viewingOwnCode;\n      return newState;\n    }\n\n    return state;\n  };\n\n  return { state: s, reducer };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar _ = require(\"lodash\");\n\nvar VM =\n/** @class */\nfunction () {\n  function VM(programs, size, cycleLimit, startPositions) {\n    if (size === void 0) {\n      size = 8000;\n    }\n\n    this.cycles = 0;\n    this.nextProgramIndex = 0;\n    this.labels = {};\n    this.equs = {};\n    this.memory = [];\n    this.warriors = [];\n    this.programs = programs;\n    this.size = size;\n    this.cycleLimit = cycleLimit;\n    var emptyInstruction = {\n      opcode: types_1.Opcode.DAT,\n      aMode: types_1.AddressingMode.Immediate,\n      aField: 0,\n      bMode: types_1.AddressingMode.Immediate,\n      bField: 0\n    };\n\n    for (var i = 0; i < size; i++) {\n      this.memory[i] = Object.assign({}, emptyInstruction);\n    }\n\n    var positions;\n\n    if (startPositions && startPositions.length === programs.length) {\n      positions = startPositions;\n    } else {\n      var maybePositions = this.findStartPositions(programs, size);\n\n      if (maybePositions === null) {\n        console.log(\"Could not assign positions\");\n        return;\n      }\n\n      positions = maybePositions;\n    } // Copy programs to memory\n\n\n    for (var i = 0; i < programs.length; i++) {\n      var program = programs[i];\n      var start = positions[i];\n      var indexOffset = 0; // Since we skip some instructions, but use the for loop index for positioning.\n\n      for (var j = 0; j < program.length; j++) {\n        var absoluteAddr = normalizedIndex(start + j + indexOffset, size);\n        var instruction = program[j];\n        instruction.owner = i;\n\n        if (instruction.opcode === types_1.Opcode.END) {\n          if (instruction.aField && this.labels[instruction.aField]) {\n            positions[i] = this.labels[instruction.aField];\n          }\n\n          break;\n        }\n\n        if (instruction.opcode === types_1.Opcode.EQU) {\n          if (instruction.label) {\n            this.equs[instruction.label] = instruction.aField;\n          }\n\n          indexOffset -= 1;\n          continue;\n        }\n\n        this.memory[absoluteAddr] = instruction;\n\n        if (instruction.label) {\n          this.labels[instruction.label] = absoluteAddr;\n        }\n      }\n    }\n\n    this.warriors = positions.map(function (pc, idx) {\n      return {\n        number: idx,\n        pc: [pc]\n      };\n    });\n  }\n  /** Iterates the CPU one cycle\n   * Returns the next absolute address that will execute, or undefined if the game is over\n   */\n\n\n  VM.prototype.tick = function () {\n    var warrior = this.warriors[this.nextProgramIndex];\n\n    if (!warrior) {\n      console.log(\"Warning: couldn't execute program\");\n      return undefined;\n    }\n\n    this.execute(warrior);\n\n    if (warrior.pc.length === 0) {\n      console.log(\"Game over: player \" + warrior.number + \" bombed!\");\n      return undefined;\n    }\n\n    this.cycles++;\n\n    if (this.cycleLimit && this.cycles > this.cycleLimit) {\n      console.log(\"Game over: draw!\");\n      return undefined;\n    }\n\n    this.nextProgramIndex += 1;\n\n    if (this.nextProgramIndex >= this.warriors.length) {\n      this.nextProgramIndex = 0;\n    }\n\n    return this.warriors[this.nextProgramIndex].pc[0];\n  };\n\n  VM.prototype.winner = function () {\n    var aliveWarriors = this.warriors.filter(function (w) {\n      return w.pc.length > 0;\n    });\n\n    if (aliveWarriors.length === 1) {\n      return aliveWarriors[0];\n    }\n\n    return undefined;\n  };\n\n  VM.prototype.print = function () {\n    var output = [];\n    output.push(\"CYCLE \" + this.cycles);\n\n    for (var _i = 0, _a = this.warriors; _i < _a.length; _i++) {\n      var warrior = _a[_i];\n      output.push(\"Process Queue: [\" + warrior.pc + \"]\");\n\n      for (var i = -5; i < 15; i++) {\n        var index = normalizedIndex(warrior.pc[0] + i, this.size);\n        var instr = index + \": \" + printInstruction(this.memory[index]);\n\n        if (i === 0) {\n          instr += \" <-- \" + warrior.number;\n        }\n\n        output.push(instr);\n      }\n    }\n\n    output.push(\"\");\n    return output.join(\"\\n\");\n  };\n\n  VM.prototype.findStartPositions = function (programs, size) {\n    /** TODO: Very silly.\n     * Current design goals:\n     * As far away from each other as currently possible.\n     * e.g. we calculate how much non-program space there will be, and aim to put them somewhere equidistant.\n     */\n    var totalProgramSize = _.flatten(programs).length;\n\n    var desiredGap = Math.floor((size - totalProgramSize) / 2);\n\n    var startingPosition = _.random(0, size);\n\n    return programs.map(function (_, idx) {\n      return (startingPosition + idx * desiredGap) % size;\n    });\n  };\n\n  VM.prototype.execute = function (warrior) {\n    var pc = warrior.pc.shift();\n    var instruction = this.memory[pc];\n    var opcode = instruction.opcode,\n        aMode = instruction.aMode,\n        aField = instruction.aField,\n        bMode = instruction.bMode,\n        bField = instruction.bField;\n    var aAddr = this.evaluateOperand(pc, aMode, aField, this.size);\n    var bAddr = this.evaluateOperand(pc, bMode, bField, this.size);\n    var a = this.memory[aAddr];\n    var b = this.memory[bAddr];\n    instruction.owner = warrior.number;\n    var shouldIncrement = true;\n\n    switch (opcode) {\n      case types_1.Opcode.ADD:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          return; // TODO: Invalid\n        }\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) + aAddr, this.size);\n          b.owner = warrior.number;\n        } else {\n          b.aField = normalizedIndex(this.evaluateField(bAddr, b.aField) + aAddr, this.size);\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) + bAddr, this.size);\n          b.owner = warrior.number;\n        }\n\n        break;\n\n      case types_1.Opcode.CMP:\n        // TODO: CMP X, #X\n        if (aMode === types_1.AddressingMode.Immediate) {\n          if (aField === b.bField) {\n            warrior.pc.push(pc + 2);\n            shouldIncrement = false;\n          }\n        } else {\n          // TODO: Test this — I assume equality doesn't actually work?\n          if (a === b) {\n            warrior.pc.push(pc + 2);\n            shouldIncrement = false;\n          }\n        }\n\n        break;\n\n      case types_1.Opcode.DAT:\n        // Don't do anything, just let the process die\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.DJN:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          // TODO: Invalid\n          break;\n        }\n\n        b.bField = this.evaluateField(bAddr, b.bField) - 1;\n        b.owner = warrior.number;\n\n        if (b.bField === 0 && aMode != types_1.AddressingMode.Immediate) {\n          warrior.pc.push(a.aField);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.MOV:\n        if (aMode === types_1.AddressingMode.Immediate || bMode === types_1.AddressingMode.Immediate) {\n          b.bField = aAddr;\n          b.owner = warrior.number;\n        } else {\n          this.memory[bAddr] = __assign({}, a);\n\n          if (a.label) {\n            this.labels[a.label] = bAddr;\n          }\n        }\n\n        break;\n\n      case types_1.Opcode.JMP:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        warrior.pc.push(aAddr);\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.JMZ:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        if (b.bField === 0) {\n          warrior.pc.push(aAddr);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.JMZ:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        if (b.bField !== 0) {\n          warrior.pc.push(aAddr);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.SPL:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        warrior.pc.push(pc + 1);\n        warrior.pc.push(aAddr);\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.SLT:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          // TODO: Spec disallows this, but I kinda like it\n          break;\n        }\n\n        var compareValue;\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          compareValue = aField;\n        } else {\n          compareValue = a.aField;\n        }\n\n        if (compareValue < b.bField) {\n          warrior.pc.push(pc + 2);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.SUB:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          return; // TODO: Invalid\n        }\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) - aAddr, this.size);\n          b.owner = warrior.number;\n        } else {\n          b.aField = normalizedIndex(this.evaluateField(bAddr, b.aField) - aAddr, this.size);\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) - bAddr, this.size);\n          b.owner = warrior.number;\n        }\n\n        break;\n    }\n\n    if (shouldIncrement) {\n      warrior.pc.push(normalizedIndex(pc + 1, this.size));\n    }\n  };\n  /** Takes a given operand and returns an actual numeric value\n   *  If mode is .Immediate, this will be a raw value.\n   *  Otherwise, it will be an absolute address.\n   *  If mode is .Autoincrement, this will mutate memory.\n   */\n\n\n  VM.prototype.evaluateOperand = function (pc, mode, field, size) {\n    if (typeof field === \"number\") {\n      if (mode === types_1.AddressingMode.Immediate) {\n        return field;\n      }\n\n      var absoluteAddr = normalizedIndex(field + pc, size);\n\n      if (mode === types_1.AddressingMode.Direct) {\n        return absoluteAddr;\n      }\n\n      var value = this.evaluateField(absoluteAddr, this.memory[absoluteAddr].bField);\n\n      if (mode === types_1.AddressingMode.Autodecrement) {\n        value -= 1;\n        this.memory[absoluteAddr].bField = value;\n      }\n\n      absoluteAddr += value;\n      return normalizedIndex(absoluteAddr, this.size);\n    } else {\n      var evaluatedField = this.evaluateField(pc, field);\n      return this.evaluateOperand(pc, mode, evaluatedField, size);\n    }\n  };\n  /** Takes a given field and normalizes it into a relative address number.\n   *  It (1) performs label/equ lookups and (2) evaluates math operations.\n   *  It does NOT actually resolve that number to an absolute address\n   */\n  // TODO: This returns -1 if it fails. It should fail more noisily\n\n\n  VM.prototype.evaluateField = function (absoluteAddr, field) {\n    var isMathExpression = function isMathExpression(x) {\n      return x.operator !== undefined;\n    };\n\n    if (typeof field === \"number\") {\n      return field;\n    } else if (isMathExpression(field)) {\n      var left = this.evaluateField(absoluteAddr, field.left);\n      var right = this.evaluateField(absoluteAddr, field.right);\n\n      if (_.isUndefined(left) || _.isUndefined(right)) {\n        return -1;\n      }\n\n      switch (field.operator) {\n        case types_1.MathOperator.Add:\n          return left + right;\n\n        case types_1.MathOperator.Subtract:\n          return left - right;\n\n        case types_1.MathOperator.Multiply:\n          return left * right;\n\n        case types_1.MathOperator.Divide:\n          return left / right;\n      }\n\n      return -1;\n    } else if (typeof field === \"string\") {\n      if (this.labels[field] != undefined) {\n        return this.labels[field] - absoluteAddr;\n      } else if (this.equs[field] != undefined) {\n        return this.equs[field];\n      } else {\n        // TODO: Should this throw?\n        console.log(\"FATAL ERROR: could not find label '\" + field + \"'\");\n        return -1;\n      }\n    } else {\n      return -1;\n    }\n  };\n\n  return VM;\n}();\n\nexports.VM = VM;\n\nfunction normalizedIndex(index, size) {\n  var newIndex = index;\n\n  while (newIndex < 0) {\n    newIndex = size + newIndex;\n  }\n\n  return newIndex % size;\n}\n\nfunction addressingModeAsString(mode) {\n  switch (mode) {\n    case types_1.AddressingMode.Direct:\n      return \"\";\n\n    case types_1.AddressingMode.Immediate:\n      return \"#\";\n\n    case types_1.AddressingMode.Indirect:\n      return \"@\";\n\n    case types_1.AddressingMode.Autodecrement:\n      return \">\";\n  }\n}\n\nfunction mathOperatorAsString(operator) {\n  switch (operator) {\n    case types_1.MathOperator.Add:\n      return \"+\";\n\n    case types_1.MathOperator.Subtract:\n      return \"-\";\n\n    case types_1.MathOperator.Multiply:\n      return \"*\";\n\n    case types_1.MathOperator.Divide:\n      return \"/\";\n  }\n}\n\nfunction printInstruction(instruction) {\n  var str = exports.printOpcode(instruction) + \" \" + exports.printOperandA(instruction) + \", \" + exports.printOperandB(instruction);\n\n  if (instruction.label) {\n    return instruction.label + \" \" + str;\n  } else {\n    return str;\n  }\n}\n\nexports.printInstruction = printInstruction;\n\nexports.printOpcode = function (instruction) {\n  return types_1.Opcode[instruction.opcode];\n};\n\nexports.printOperand = function (mode, value) {\n  return \"\" + addressingModeAsString(mode) + printOperandVal(value);\n};\n\nexports.printOperandA = function (instruction) {\n  return exports.printOperand(instruction.aMode, instruction.aField);\n};\n\nexports.printOperandB = function (instruction) {\n  return exports.printOperand(instruction.bMode, instruction.bField);\n};\n\nvar printOperandVal = function printOperandVal(operand) {\n  if (typeof operand == \"string\") {\n    return operand;\n  } else if (typeof operand == \"number\") {\n    return \"\" + operand;\n  } else {\n    return \"\" + printOperandVal(operand.left) + mathOperatorAsString(operand.operator) + printOperandVal(operand.right);\n  }\n};","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./types\"));\n\nvar parser_1 = require(\"./parser\");\n\nexports.parse = parser_1.parse;\n\nvar mars_1 = require(\"./mars\");\n\nexports.VM = mars_1.VM;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar AddressingMode;\n\n(function (AddressingMode) {\n  AddressingMode[AddressingMode[\"Immediate\"] = 0] = \"Immediate\";\n  AddressingMode[AddressingMode[\"Direct\"] = 1] = \"Direct\";\n  AddressingMode[AddressingMode[\"Indirect\"] = 2] = \"Indirect\";\n  AddressingMode[AddressingMode[\"Autodecrement\"] = 3] = \"Autodecrement\"; // TODO: Distinguish between 86 and 88 (and 94?)\n})(AddressingMode = exports.AddressingMode || (exports.AddressingMode = {}));\n\nvar Opcode;\n\n(function (Opcode) {\n  Opcode[Opcode[\"DAT\"] = 0] = \"DAT\";\n  Opcode[Opcode[\"MOV\"] = 1] = \"MOV\";\n  Opcode[Opcode[\"ADD\"] = 2] = \"ADD\";\n  Opcode[Opcode[\"SUB\"] = 3] = \"SUB\";\n  Opcode[Opcode[\"JMZ\"] = 4] = \"JMZ\";\n  Opcode[Opcode[\"JMN\"] = 5] = \"JMN\";\n  Opcode[Opcode[\"JMP\"] = 6] = \"JMP\";\n  Opcode[Opcode[\"DJN\"] = 7] = \"DJN\";\n  Opcode[Opcode[\"CMP\"] = 8] = \"CMP\";\n  Opcode[Opcode[\"SPL\"] = 9] = \"SPL\";\n  Opcode[Opcode[\"SLT\"] = 10] = \"SLT\";\n  Opcode[Opcode[\"EQU\"] = 11] = \"EQU\";\n  Opcode[Opcode[\"END\"] = 12] = \"END\";\n})(Opcode = exports.Opcode || (exports.Opcode = {}));\n\nvar MathOperator;\n\n(function (MathOperator) {\n  MathOperator[MathOperator[\"Add\"] = 0] = \"Add\";\n  MathOperator[MathOperator[\"Divide\"] = 1] = \"Divide\";\n  MathOperator[MathOperator[\"Subtract\"] = 2] = \"Subtract\";\n  MathOperator[MathOperator[\"Multiply\"] = 3] = \"Multiply\";\n})(MathOperator = exports.MathOperator || (exports.MathOperator = {}));\n\nexports.instructionToString = function (instruction) {\n  var _a;\n\n  var label = instruction.label,\n      opcode = instruction.opcode,\n      aMode = instruction.aMode,\n      aField = instruction.aField,\n      bMode = instruction.bMode,\n      bField = instruction.bField;\n  var mode = (_a = {}, _a[AddressingMode.Immediate] = \"#\", _a[AddressingMode.Direct] = \"\", _a[AddressingMode.Indirect] = \"@\", _a[AddressingMode.Autodecrement] = \"<\", _a);\n  var str = Opcode[opcode] + \" \" + mode[aMode] + aField + \", \" + mode[bMode] + \" \" + bField;\n\n  if (label) {\n    str = label + \" \" + str;\n  }\n\n  return str;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar ohm = require(\"ohm-js\");\n\nvar grammarText = \"\\nProgram {\\n\\n  Program = Instruction+\\n  \\n  Instruction \\n   = label opcode Operand (\\\",\\\" Operand)? comment? -- label\\n   | opcode Operand (\\\",\\\" Operand)? comment? -- nolabel\\n   | comment -- commentonly\\n  \\n  label\\n      = word\\n  \\n  opcode\\n      = \\\"DAT\\\"\\n      | \\\"MOV\\\"\\n      | \\\"ADD\\\"\\n      | \\\"SUB\\\"\\n      | \\\"JMZ\\\"\\n      | \\\"JMN\\\"\\n      | \\\"JMP\\\"\\n      | \\\"DJN\\\"\\n      | \\\"CMP\\\"\\n      | \\\"SPL\\\"\\n      | \\\"SLT\\\"\\n      | \\\"EQU\\\"\\n      | \\\"END\\\"\\n      | \\\"dat\\\"\\n      | \\\"mov\\\"\\n      | \\\"add\\\"\\n      | \\\"sub\\\"\\n      | \\\"jmz\\\"\\n      | \\\"jmn\\\"\\n      | \\\"jmp\\\"\\n      | \\\"djn\\\"\\n      | \\\"cmp\\\"\\n      | \\\"spl\\\"\\n      | \\\"slt\\\"\\n      | \\\"equ\\\"\\n      | \\\"end\\\"    \\n  \\n  \\n  Operand\\n      = addressingMode? OperandValue\\n  \\n  OperandValue = AddExp | OperandValue\\n  \\n  AddExp\\n      = AddExp \\\"+\\\" MulExp  -- plus\\n      | AddExp \\\"-\\\" MulExp  -- minus\\n      | MulExp\\n  \\n  MulExp\\n      = MulExp \\\"*\\\" operandLiteral  -- times\\n      | MulExp \\\"/\\\" operandLiteral  -- divide\\n      | operandLiteral\\n  \\n  operandLiteral = number | label\\n  \\n  addressingMode = \\\"$\\\" | \\\"#\\\" | \\\"@\\\" | \\\"<\\\"\\n  \\n  comment = \\\";\\\" (~lineTerminator any)*\\n  \\n  word = alnum+\\n  \\n  number = \\\"-\\\"? digit+\\n  \\n  lineTerminator = \\\"\\\\n\\\" | \\\"\\\\r\\\" | \\\"\\\\u2028\\\" | \\\"\\\\u2029\\\"\\n  \\n  }\";\nexports.grammar = ohm.grammar(grammarText);\nexports.semantics = exports.grammar.createSemantics();\n\nfunction parse(text) {\n  var parsed = exports.grammar.match(text);\n  return exports.semantics(parsed).asMarsJSObject();\n}\n\nexports.parse = parse;\nexports.semantics.addOperation(\"asMarsJSObject\", {\n  Program: function Program(instructions) {\n    return instructions.children.map(function (i) {\n      return i.asMarsJSObject();\n    }).filter(function (i) {\n      return i != undefined;\n    });\n  },\n  Instruction_label: function Instruction_label(label, opcode, a, _, b, comment) {\n    var aResult = a.asMarsJSObject();\n    var bResult = b.asMarsJSObject()[0] || {\n      addressingMode: types_1.AddressingMode.Direct,\n      field: 0\n    };\n    var result = {\n      label: label.asMarsJSObject(),\n      opcode: opcode.asMarsJSObject(),\n      aMode: aResult.addressingMode,\n      aField: aResult.field,\n      bMode: bResult.addressingMode,\n      bField: bResult.field\n    };\n    var c = comment.asMarsJSObject()[0];\n\n    if (c) {\n      result[\"comment\"] = c;\n    }\n\n    return result;\n  },\n  Instruction_nolabel: function Instruction_nolabel(opcode, a, _, b, comment) {\n    var aResult = a.asMarsJSObject();\n    var bResult = b.asMarsJSObject()[0] || {\n      addressingMode: types_1.AddressingMode.Direct,\n      field: 0\n    };\n    var result = {\n      opcode: opcode.asMarsJSObject(),\n      aMode: aResult.addressingMode,\n      aField: aResult.field,\n      bMode: bResult.addressingMode,\n      bField: bResult.field\n    };\n    var c = comment.asMarsJSObject()[0];\n\n    if (c) {\n      result[\"comment\"] = c;\n    }\n\n    return result;\n  },\n  Instruction_commentonly: function Instruction_commentonly(_) {\n    return undefined;\n  },\n  Operand: function Operand(addressingMode, operandValue) {\n    var map = {\n      $: types_1.AddressingMode.Direct,\n      \"#\": types_1.AddressingMode.Immediate,\n      \"@\": types_1.AddressingMode.Indirect,\n      \"<\": types_1.AddressingMode.Autodecrement,\n      \"\": types_1.AddressingMode.Direct\n    };\n    return {\n      addressingMode: map[addressingMode.sourceString],\n      field: operandValue.asMarsJSObject()\n    };\n  },\n  OperandValue: function OperandValue(e) {\n    return e.asMarsJSObject();\n  },\n  AddExp: function AddExp(e) {\n    return e.asMarsJSObject();\n  },\n  AddExp_plus: function AddExp_plus(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Add,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  AddExp_minus: function AddExp_minus(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Subtract,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  MulExp_times: function MulExp_times(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Multiply,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  MulExp_divide: function MulExp_divide(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Divide,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  operandLiteral: function operandLiteral(e) {\n    return e.asMarsJSObject();\n  },\n  opcode: function opcode(_opcode) {\n    return types_1.Opcode[_opcode.sourceString.toUpperCase()];\n  },\n  number: function number(minus, num) {\n    return parseInt(\"\" + minus.sourceString + num.sourceString);\n  },\n  label: function label(_label) {\n    return _label.sourceString;\n  },\n  comment: function comment(_, _comment) {\n    return _comment.sourceString;\n  }\n});"],"sourceRoot":""}