{"version":3,"sources":["State.ts","types.ts","Action.ts","Level.ts","components/DebugToolbar.tsx","components/MemoryCell.tsx","components/MemoryView.tsx","components/DebugView.tsx","components/OpcodeKeyboard.tsx","components/NumberKeyboard.tsx","components/EmojiKeyboard.tsx","currentOperandIsValid.ts","themes.ts","components/CodeView.tsx","components/EditorView.tsx","App.tsx","reducer.ts","serviceWorker.ts","index.tsx","../../marsjs/dist/mars.js","../../marsjs/dist/types.js","../../marsjs/dist/parser.js","../../marsjs/dist/index.js"],"names":["UIMode","Token","AddressingMode","initialState","props","code","i","push","Object","objectSpread","cursor","line","token","isMidOperand","memory","warriors","isPlaying","debugTicks","nextPC","uiMode","Editor","editingCode","viewingOwnCode","ValidEmoji","EmojiNames","codeStringToCode","str","concat","toConsumableArray","split","map","l","tokens","_","includes","unshift","undefined","Opcode","MathOperator","ActionType","addressingModeMap","$","Direct","#","Immediate","@","Indirect",">","Autodecrement","","addressingModeString","mode","invert","addressingModeValue","modeString","typeOpcodeAction","opcodeString","type","TypeOpcode","value","typeOperandModeAction","TypeOperandMode","typeOperandDigitAction","digit","TypeOperandDigit","toString","typeOperandLabelAction","label","TypeOperandLabel","nextWordAction","NextWord","setCursorAction","SetCursor","backspaceAction","Backspace","debugRestartAction","DebugRestart","debugUndoAction","DebugUndo","debugPauseOrStepAction","DebugPauseOrStep","debugPlayAction","DebugPlay","debugFastAction","DebugFast","switchToDebugAction","SwitchToDebug","switchToEditorAction","SwitchToEditor","toggleWhoseCodeAction","ToggleWhoseCode","Levels","name","testWinCondition","filter","opcode","DAT","aMode","aField","bField","bMode","length","DebugToolbar","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","restart","dispatch","undo","pauseOrStep","play","fast","inherits","createClass","key","react","className","style","textAlign","onClick","isAtStart","isPaused","React","MemoryCell","owner","isPC","isNext","instruction","classes","classNames","memory-cell","warrior-1","warrior-2","pc","next","strings","printOpcode","printOperandA","printOperandB","textEls","t","replace","MemoryView","cells","m","idx","find","w","DebugView","switchToEditor","MemoryView_MemoryView","id","DebugToolbar_DebugToolbar","OpcodeKeyboard","currentSpacer","makeOpcodeButton","o","onKeyPress","rows","opcodes","index","buttons","onNext","onBackspace","NumberKeyboard","leftKeys","numberKeys","k","canAddAddressingMode","disabled","canNext","isEndOfLine","EmojiKeyboard","emojiKeys","currentOperandIsValid","state","operand","isNumber","num","parseInt","isValidMath","eq","rest","slice","operandIsValid","Bim","color1","color2","color3","color4","color5","color6","color7","color8","CodeView","codeLines","lineSelected","currentLine","currentToken","ti","selected","tokenClasses","operand-1","operand-2","empty","isUndefined","color","backgroundColor","e","onTokenClick","stopPropagation","klass","current-line","onLineClick","background","EditorView","switchToDebug","codeIsValid","showOtherCode","clickLine","clickToken","console","log","typeOpcode","typeDigitOrMode","d","action","didTypeBackspace","keyboard","_this$props","isOwnCode","Operand1","Operand2","showOtherButton","enemyCodeExists","valid","emojiRow","App","reducer","timer","setState","_createReducerAndStat","rawCode","enemyCode","size","programs","generatePrograms","playerCode","codes","c","parse","otherCode","vm","VM","cloneDeep","s","debugStartPositions","activeLevel","equs","newState","Label","splice","winner","tick","result","indexOf","youWon","alert","print","DebugTick","playRate","join","codeToString","Debug","createReducerAndState","_this2","setTimeout","react_default","a","createElement","EditorView_EditorView","DebugView_DebugView","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__assign","assign","n","p","prototype","hasOwnProperty","defineProperty","exports","types_1","__webpack_require__","cycleLimit","startPositions","cycles","nextProgramIndex","labels","positions","emptyInstruction","maybePositions","findStartPositions","startOffsets","program","start","indexOffset","j","absoluteAddr","normalizedIndex","END","EQU","number","warrior","execute","aliveWarriors","output","_i","_a","instr","printInstruction","totalProgramSize","flatten","desiredGap","Math","floor","startingPosition","random","shift","aAddr","evaluateOperand","bAddr","b","shouldIncrement","ADD","evaluateField","CMP","DJN","MOV","JMP","JMZ","SPL","SLT","SUB","field","evaluatedField","operator","left","right","Add","Subtract","Multiply","Divide","newIndex","printOperand","addressingModeAsString","printOperandVal","mathOperatorAsString","instructionToString","ohm","grammar","semantics","createSemantics","text","parsed","asMarsJSObject","addOperation","Program","instructions","children","Instruction_label","comment","aResult","bResult","addressingMode","Instruction_nolabel","Instruction_commentonly","Operand","operandValue","<","sourceString","OperandValue","AddExp","AddExp_plus","AddExp_minus","MulExp_times","MulExp_divide","operandLiteral","_opcode","toUpperCase","minus","_label","_comment","__export","parser_1","mars_1"],"mappings":"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","file":"static/js/main.9a1b9ab3.chunk.js","sourcesContent":["import { Line } from \"./Line\";\nimport { Instruction, Warrior } from \"corewars-js\";\nimport { Level } from \"./Level\";\nimport _ from \"lodash\";\n\nexport interface State {\n  code: Line[];\n  enemyCode?: Line[];\n\n  cursor: CursorPosition;\n  memory: Instruction[];\n\n  warriors: Warrior[];\n\n  isPlaying: boolean;\n  winner?: number; // TODO: This suggests we need a richer 'warrior' data structure with metadata\n  playRate?: number;\n  debugTicks: number;\n  debugStartPositions?: number[];\n  nextPC: number;\n\n  uiMode: UIMode;\n\n  /** If false, show the other code */\n  editingCode: Line[];\n  viewingOwnCode: boolean;\n\n  activeLevel?: Level;\n}\n\nexport enum UIMode {\n  Debug,\n  Editor\n}\n\nexport const initialState = (props?: Partial<State>): State => {\n  const code: Line[] = [];\n  for (let i = 0; i < 10; i++) {\n    code.push([]);\n  }\n  return {\n    code,\n    cursor: { line: 0, token: 0, isMidOperand: false },\n    memory: [],\n    warriors: [],\n    isPlaying: false,\n    debugTicks: 0,\n    nextPC: 0,\n    uiMode: UIMode.Editor,\n    editingCode: [],\n    viewingOwnCode: true,\n    ...props\n  };\n};\n\nexport const ValidEmoji = [\"🏁\", \"💜\", \"🔥\", \"🥑\", \"💩\", \"🐈\"];\nexport const EmojiNames = [\"start\", \"love\", \"flame\", \"avo\", \"poop\", \"cat\"];\n\nexport interface CursorPosition {\n  line: number;\n  token: number | undefined;\n  isMidOperand: boolean;\n}\n\nexport enum Token {\n  Label = 0,\n  Opcode,\n  Operand1,\n  Operand2\n}\n\nexport function codeStringToCode(str: string): Line[] {\n  return [\n    ...str.split(\"\\n\").map(l => {\n      let tokens: (string | undefined)[] = l.split(\" \");\n      if (!_.includes(ValidEmoji, tokens[0])) {\n        tokens.unshift(undefined);\n      }\n      return tokens;\n    }),\n    [undefined, undefined, undefined, undefined]\n  ];\n}\n\nexport function codeToString(code: Line[]): string {\n  return code.map(l => l.join(\" \")).join(\"\\n\");\n}\n","import _ from \"lodash\";\n\n// Taken from marsjs. We'll eventually want to properly load that in.\n\nexport enum AddressingMode {\n  Immediate,\n  Direct,\n  Indirect,\n  Autodecrement // TODO: Distinguish between 86 and 88 (and 94?)\n}\n\nconst addressingModeMap: { [s: string]: AddressingMode } = {\n  $: AddressingMode.Direct,\n  \"#\": AddressingMode.Immediate,\n  \"@\": AddressingMode.Indirect,\n  \">\": AddressingMode.Autodecrement,\n  \"\": AddressingMode.Direct\n};\n\nexport function addressingModeString(mode: AddressingMode) {\n  return _.invert(addressingModeMap)[mode] || \"\";\n}\n\nexport function addressingModeValue(modeString: string): number {\n  return addressingModeMap[modeString];\n}\n\nexport enum Opcode {\n  DAT,\n  MOV,\n\n  ADD,\n  SUB,\n\n  JMZ,\n  JMN,\n  JMP,\n\n  DJN,\n  CMP,\n  SLT,\n\n  SPL,\n\n  EQU,\n  END\n}\n\nexport enum MathOperator {\n  Add,\n  Divide,\n  Subtract,\n  Multiply\n}\n\nexport interface MathExpression {\n  left: string | number | MathExpression;\n  right: string | number | MathExpression;\n  operator: MathOperator;\n}\n\nexport interface Instruction {\n  opcode: Opcode;\n  label?: string;\n  comment?: string;\n\n  aMode: AddressingMode;\n  aField: number; // TODO: Not really a number!\n\n  bMode: AddressingMode;\n  bField: number; // TODO: Not really a number!\n}\n\nexport interface Warrior {\n  number: number;\n  pc: number[];\n}\n","import { AddressingMode, addressingModeString } from \"./types\";\nimport { CursorPosition } from \"./State\";\n\nexport enum ActionType {\n  NextWord,\n  TypeOpcode,\n  TypeOperandDigit,\n  TypeOperandMode,\n  TypeOperandLabel,\n  SetCursor,\n  Backspace,\n\n  DebugRestart,\n  DebugUndo,\n  DebugPauseOrStep,\n  DebugPlay,\n  DebugFast,\n  DebugTick,\n\n  SwitchToDebug,\n  SwitchToEditor,\n  ToggleWhoseCode\n}\n\nexport interface Action<T> {\n  type: ActionType;\n  value: T;\n}\n\nexport const typeOpcodeAction = (opcodeString: string): Action<string> => {\n  return {\n    type: ActionType.TypeOpcode,\n    value: opcodeString\n  };\n};\n\nexport const typeOperandModeAction = (mode: AddressingMode): Action<string> => {\n  return {\n    type: ActionType.TypeOperandMode,\n    value: addressingModeString(mode)\n  };\n};\n\nexport const typeOperandDigitAction = (digit: number): Action<string> => {\n  return {\n    type: ActionType.TypeOperandDigit,\n    value: digit.toString()\n  };\n};\n\nexport const typeOperandLabelAction = (label: string): Action<string> => {\n  return {\n    type: ActionType.TypeOperandLabel,\n    value: label.toString()\n  };\n};\n\nexport const nextWordAction = (): Action<undefined> => {\n  return {\n    type: ActionType.NextWord,\n    value: undefined\n  };\n};\n\nexport const setCursorAction = (\n  line: number,\n  token: number | undefined\n): Action<CursorPosition> => {\n  return {\n    type: ActionType.SetCursor,\n    value: { line, token, isMidOperand: false }\n  };\n};\n\nexport const backspaceAction = (): Action<undefined> => {\n  return {\n    type: ActionType.Backspace,\n    value: undefined\n  };\n};\n\nexport const debugRestartAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugRestart,\n    value: undefined\n  };\n};\n\nexport const debugUndoAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugUndo,\n    value: undefined\n  };\n};\n\nexport const debugPauseOrStepAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugPauseOrStep,\n    value: undefined\n  };\n};\n\nexport const debugPlayAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugPlay,\n    value: undefined\n  };\n};\n\nexport const debugTickAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugTick,\n    value: undefined\n  };\n};\n\nexport const debugFastAction = (): Action<undefined> => {\n  return {\n    type: ActionType.DebugFast,\n    value: undefined\n  };\n};\n\nexport const switchToDebugAction = (): Action<undefined> => {\n  return {\n    type: ActionType.SwitchToDebug,\n    value: undefined\n  };\n};\n\nexport const switchToEditorAction = (): Action<undefined> => {\n  return {\n    type: ActionType.SwitchToEditor,\n    value: undefined\n  };\n};\n\nexport const toggleWhoseCodeAction = (): Action<undefined> => {\n  return {\n    type: ActionType.ToggleWhoseCode,\n    value: undefined\n  };\n};\n","import { Instruction, Warrior, Opcode, AddressingMode } from \"corewars-js\";\n\nexport interface Level {\n  name: string;\n  testWinCondition: (memory: Instruction[], warriors: Warrior[]) => boolean;\n}\n\nconst wipe = {\n  name: \"Leave no trace\",\n  testWinCondition: (memory: Instruction[], warriors: Warrior[]) => {\n    const overwrittenInstructions = memory.filter(i => {\n      return (\n        i.opcode === Opcode.DAT &&\n        i.aMode === AddressingMode.Direct &&\n        i.aField === 999 &&\n        i.bField === 999 &&\n        i.bMode === AddressingMode.Direct\n      );\n    });\n    return overwrittenInstructions.length === memory.length;\n  }\n};\n\nexport const Levels: Level[] = [wipe];\n","import * as React from \"react\";\nimport { Dispatch } from \"../reducer\";\nimport {\n  debugRestartAction,\n  debugUndoAction,\n  debugPauseOrStepAction,\n  debugPlayAction,\n  debugFastAction\n} from \"../Action\";\n\nimport \"../debugToolbar.css\";\n\ninterface Props {\n  dispatch: Dispatch;\n  isAtStart: boolean;\n  isPaused: boolean;\n}\n\nexport class DebugToolbar extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div\n        className=\"debug-toolbar\"\n        style={{\n          textAlign: \"center\"\n        }}\n      >\n        <button onClick={this.restart}>\n          {this.props.isAtStart ? \"Reset\" : \"Stop\"}\n        </button>\n        <button onClick={this.undo}>Undo</button>\n        <button onClick={this.pauseOrStep}>\n          {this.props.isPaused ? \"Step\" : \"Pause\"}\n        </button>\n        <button onClick={this.play}>Run</button>\n        <button onClick={this.fast}>Fast</button>\n      </div>\n    );\n  }\n\n  restart = () => {\n    this.props.dispatch(debugRestartAction());\n  };\n\n  undo = () => {\n    this.props.dispatch(debugUndoAction());\n  };\n\n  pauseOrStep = () => {\n    this.props.dispatch(debugPauseOrStepAction());\n  };\n\n  play = () => {\n    this.props.dispatch(debugPlayAction());\n  };\n\n  fast = () => {\n    this.props.dispatch(debugFastAction());\n  };\n}\n","import * as React from \"react\";\nimport classNames from \"classnames\";\nimport { Instruction } from \"corewars-js\";\nimport {\n  printOpcode,\n  printOperandA,\n  printOperandB\n} from \"corewars-js/dist/mars\";\nimport { ValidEmoji, EmojiNames } from \"../State\";\n\ninterface Props {\n  instruction: Instruction;\n  owner?: number;\n  isPC: boolean;\n  isNext: boolean;\n}\n\nexport function MemoryCell(props: Props) {\n  const { owner, isPC, isNext, instruction } = props;\n\n  const classes = classNames({\n    \"memory-cell\": true,\n    \"warrior-1\": owner === 0,\n    \"warrior-2\": owner === 1,\n    pc: isPC,\n    next: isNext\n  });\n\n  let strings = [\n    printOpcode(instruction),\n    printOperandA(instruction),\n    printOperandB(instruction)\n  ];\n  if (instruction.label) {\n    strings.unshift(instruction.label);\n  }\n\n  const text = strings.map(t => {\n    for (let i = 0; i < ValidEmoji.length; i++) {\n      t = t.replace(EmojiNames[i], ValidEmoji[i]);\n    }\n    return t;\n  });\n\n  const textEls = text.map(t => {\n    return <div>{t}</div>;\n  });\n\n  return <div className={classes}>{textEls}</div>;\n}\n","import * as React from \"react\";\nimport { Instruction, Warrior } from \"corewars-js\";\nimport { MemoryCell } from \"./MemoryCell\";\nimport _ from \"lodash\";\nimport \"../memoryView.css\";\n\ninterface Props {\n  memory: Instruction[];\n  warriors: Warrior[];\n  nextPC: number;\n}\n\nexport class MemoryView extends React.Component<Props, {}> {\n  render() {\n    const cells = this.props.memory.map((m, idx) => {\n      const isPC = !!this.props.warriors.find(w => _.includes(w.pc, idx));\n      const isNext = idx === this.props.nextPC;\n      return (\n        <MemoryCell\n          owner={m.owner}\n          isPC={isPC}\n          isNext={isNext}\n          key={`memory-${idx}`}\n          instruction={m}\n        />\n      );\n    });\n\n    return <div className=\"memory-view\">{cells}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { Dispatch } from \"../reducer\";\nimport { Line } from \"../Line\";\nimport { DebugToolbar } from \"./DebugToolbar\";\nimport { MemoryView } from \"./MemoryView\";\nimport { Instruction, Warrior } from \"corewars-js\";\n\nimport \"../debugView.css\";\nimport { switchToEditorAction } from \"../Action\";\n\ninterface Props {\n  code: Line[];\n  dispatch: Dispatch;\n  memory: Instruction[];\n  warriors: Warrior[];\n  nextPC: number;\n  isAtStart: boolean;\n  isPaused: boolean;\n}\n\nexport class DebugView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div className=\"debug\">\n        <MemoryView\n          memory={this.props.memory}\n          warriors={this.props.warriors}\n          nextPC={this.props.nextPC}\n        />\n        <button onClick={this.switchToEditor} id=\"show-editor\">\n          edit\n        </button>\n        <div id=\"logo\">omega</div>\n        <DebugToolbar\n          dispatch={this.props.dispatch}\n          isAtStart={this.props.isAtStart}\n          isPaused={this.props.isPaused}\n        />\n      </div>\n    );\n  }\n  switchToEditor = () => {\n    this.props.dispatch(switchToEditorAction());\n  };\n}\n","import * as React from \"react\";\n\ninterface Props {\n  onKeyPress: (opcode: string) => void;\n  onBackspace: () => void;\n  onNext: () => void;\n}\n\nexport default function(props: Props) {\n  const makeOpcodeRow = (opcodes: string[], index: number) => {\n    const buttons = opcodes.map(makeOpcodeButton);\n    return (\n      <div className=\"opcode-row\" key={`opcode-row-${index}`}>\n        {buttons}\n      </div>\n    );\n  };\n\n  let currentSpacer = 0;\n\n  const makeOpcodeButton = (o: string) => {\n    if (o === \"spacer\") {\n      currentSpacer += 1;\n      return <div className=\"spacer\" key={`spacer-${currentSpacer}`} />;\n    }\n\n    return (\n      <button\n        key={`key-${o}`}\n        className=\"opcode\"\n        onClick={() => props.onKeyPress(o)}\n      >\n        {o}\n      </button>\n    );\n  };\n\n  const rows = [\n    [\"DAT\", \"MOV\", \"spacer\", \"ADD\", \"SUB\", \"spacer\", \"SPL\"],\n    [\"JMZ\", \"JMN\", \"JMP\"],\n    [\"DJN\", \"CMP\", \"SLT\"]\n  ].map(makeOpcodeRow);\n\n  return (\n    <div className=\"opcode keyboard\">\n      <div className=\"opcodes\">{rows}</div>\n      <button key=\"next\" id=\"next-key\" onClick={props.onNext}>\n        space\n      </button>\n      <button key=\"backspace\" id=\"backspace-key\" onClick={props.onBackspace}>\n        del\n      </button>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\ninterface Props {\n  canAddAddressingMode: boolean;\n  canNext: boolean;\n  onKeyPress: (number: string) => void;\n  onNext: () => void;\n  onBackspace: () => void;\n  isEndOfLine: boolean;\n}\n\nexport default function(props: Props) {\n  const numberKeys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map(k => {\n    return (\n      <button\n        key={`key-${k}`}\n        id={`numkey-${k}`}\n        className=\"number\"\n        onClick={() => props.onKeyPress(k.toString())}\n      >\n        {k}\n      </button>\n    );\n  });\n\n  let leftKeys;\n\n  if (props.canAddAddressingMode) {\n    leftKeys = [\"#\", \"@\", \">\", \"-\"].map(k => {\n      return (\n        <button\n          key={`key-${k}`}\n          className=\"addressingMode\"\n          disabled={!props.canAddAddressingMode}\n          onClick={() => props.onKeyPress(k.toString())}\n        >\n          {k}\n        </button>\n      );\n    });\n  } else {\n    leftKeys = [\"/\", \"*\", \"+\", \"-\"].map(k => {\n      return (\n        <button\n          key={`key-${k}`}\n          className=\"addressingMode\"\n          disabled={k !== \"-\" && props.canAddAddressingMode}\n          onClick={() => props.onKeyPress(k)}\n        >\n          {k}\n        </button>\n      );\n    });\n  }\n\n  return (\n    <div className=\"keyboard number\">\n      <div className=\"leftKeys\">{leftKeys}</div>\n      <div className=\"numbers\">{numberKeys}</div>\n      <button\n        key=\"done\"\n        id=\"next-key\"\n        disabled={!props.canNext}\n        onClick={() => props.onNext()}\n      >\n        {props.isEndOfLine ? \"return\" : \",\"}\n      </button>\n      <button\n        key=\"backspace\"\n        id=\"backspace-key\"\n        onClick={() => props.onBackspace()}\n      >\n        del\n      </button>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { ValidEmoji } from \"../State\";\n\ninterface Props {\n  onKeyPress: (emoji: string) => void;\n}\n\nexport default function(props: Props) {\n  const emojiKeys = ValidEmoji.map(k => {\n    return (\n      <button\n        key={`key-${k}`}\n        id={`emojikey-${k}`}\n        className=\"emoji\"\n        onClick={() => props.onKeyPress(k)}\n      >\n        {k}\n      </button>\n    );\n  });\n\n  return <div id=\"emoji-bar\">{emojiKeys}</div>;\n}\n","import { CursorPosition } from \"./State\";\nimport { addressingModeValue } from \"./types\";\nimport { Line } from \"./Line\";\n\nexport function currentOperandIsValid(state: {\n  code: Line[];\n  cursor: CursorPosition;\n}): boolean {\n  if (state.cursor.token === undefined) {\n    return true;\n  }\n\n  const operand = state.code[state.cursor.line][state.cursor.token];\n  if (!operand) return false;\n\n  return operandIsValid(operand);\n}\n\nexport function operandIsValid(operand: string): boolean {\n  const isNumber = (num: string) => parseInt(num).toString() === num;\n  const isValidMath = (eq: string) => {\n    if (!(isNumber(eq[0]) || eq[0] === \"-\")) return false;\n    if (!isNumber(eq[eq.length - 1])) return false;\n    return true;\n  };\n\n  if (isNumber(operand) || isValidMath(operand)) {\n    return true;\n  }\n\n  const addressingMode = addressingModeValue(operand[0]);\n  if (addressingMode) {\n    const rest = operand.slice(1);\n    return isNumber(rest) || isValidMath(rest);\n  }\n\n  return true;\n}\n","interface Palette {\n  color1: string;\n  color2: string;\n  color3: string;\n  color4: string;\n  color5: string;\n  color6: string;\n  color7: string;\n  color8: string;\n}\n\nexport interface Theme {\n  bgColor: string;\n  fgColor: string;\n  normal: Palette;\n  bold: Palette;\n}\n\nexport const Bim: Theme = {\n  bgColor: \"#012849\",\n  fgColor: \"#a9bed8\",\n  normal: {\n    color1: \"#2c2423\",\n    color2: \"#f557a0\",\n    color3: \"#a9ee55\",\n    color4: \"#f5a255\",\n    color5: \"#5ea2ec\",\n    color6: \"#a957ec\",\n    color7: \"#5eeea0\",\n    color8: \"#918988\"\n  },\n  bold: {\n    color1: \"#918988\",\n    color2: \"#f579b2\",\n    color3: \"#bbee78\",\n    color4: \"#f5b378\",\n    color5: \"#81b3ec\",\n    color6: \"#bb79ec\",\n    color7: \"#81eeb2\",\n    color8: \"#f5eeec\"\n  }\n};\n","import * as React from \"react\";\nimport { Line } from \"../Line\";\nimport classNames from \"classnames\";\nimport _ from \"lodash\";\nimport { Bim } from \"../themes\";\n\nimport \"../crt.css\";\n\ninterface Props {\n  code: Line[];\n  currentLine: number;\n  currentToken?: number;\n  onLineClick?: (line: number) => void;\n  onTokenClick?: (line: number, token: number) => void;\n}\n\nexport default function(props: Props) {\n  const codeLines = props.code.map((l, i) => {\n    const lineSelected =\n      i === props.currentLine && props.currentToken === undefined;\n\n    const tokens = l.map((t, ti) => {\n      const selected = i === props.currentLine && ti === props.currentToken;\n      const tokenClasses = classNames(\"token\", {\n        label: ti === 0,\n        opcode: ti === 1,\n        \"operand-1\": ti === 2,\n        \"operand-2\": ti === 3,\n        selected,\n        operand: ti > 1,\n        empty: _.isUndefined(t)\n      });\n\n      const style: React.CSSProperties = {};\n      style.color = Bim.bold.color1;\n\n      if (selected || lineSelected) {\n        style.backgroundColor = Bim.fgColor;\n        style.color = Bim.bgColor;\n      }\n\n      return (\n        <span\n          className={tokenClasses}\n          key={`token-${i}-${ti}`}\n          onClick={(e: any) => {\n            props.onTokenClick && props.onTokenClick(i, ti);\n            e.stopPropagation();\n          }}\n          style={style}\n        >\n          {t}\n        </span>\n      );\n    });\n\n    const klass = classNames(\"code-line\", {\n      \"current-line\": i === props.currentLine\n    });\n\n    return (\n      <div\n        className={klass}\n        key={`line-${i}`}\n        onClick={() => props.onLineClick && props.onLineClick(i)}\n        style={{\n          backgroundColor: lineSelected ? Bim.fgColor : Bim.bgColor,\n          color: Bim.fgColor\n        }}\n      >\n        <span\n          className=\"line-num relative\"\n          style={{ backgroundColor: Bim.bold.color1 }}\n        >\n          {i - props.currentLine}\n        </span>\n        <span className=\"code-instruction\">{tokens}</span>\n      </div>\n    );\n  });\n  return (\n    <div className=\"container\">\n      <div\n        className=\"code-box crt\"\n        style={{\n          background: `linear-gradient(to right, ${Bim.bold.color1} 40px, ${\n            Bim.bgColor\n          } 40px)`\n        }}\n      >\n        {codeLines}\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport OpcodeKeyboard from \"./OpcodeKeyboard\";\nimport NumberKeyboard from \"./NumberKeyboard\";\nimport EmojiKeyboard from \"./EmojiKeyboard\";\nimport _ from \"lodash\";\nimport { currentOperandIsValid } from \"../currentOperandIsValid\";\nimport CodeView from \"./CodeView\";\nimport { Dispatch } from \"../reducer\";\nimport {\n  setCursorAction,\n  typeOpcodeAction,\n  Action,\n  typeOperandDigitAction,\n  typeOperandModeAction,\n  typeOperandLabelAction,\n  nextWordAction,\n  backspaceAction,\n  switchToDebugAction,\n  toggleWhoseCodeAction\n} from \"../Action\";\nimport { addressingModeValue } from \"../types\";\nimport { CursorPosition, Token } from \"../State\";\nimport { Line } from \"../Line\";\n\ninterface Props {\n  cursor: CursorPosition;\n  code: Line[];\n  dispatch: Dispatch;\n  isOwnCode: boolean;\n  enemyCodeExists: boolean;\n}\n\nexport class EditorView extends React.Component<Props, {}> {\n  render() {\n    const { cursor, code, isOwnCode } = this.props;\n\n    let keyboard;\n    if (cursor.token === Token.Opcode || cursor.token === undefined) {\n      keyboard = (\n        <OpcodeKeyboard\n          onKeyPress={this.typeOpcode}\n          onNext={this.next}\n          onBackspace={this.didTypeBackspace}\n        />\n      );\n    } else if (\n      cursor.token === Token.Operand1 ||\n      cursor.token === Token.Operand2\n    ) {\n      keyboard = (\n        <NumberKeyboard\n          onKeyPress={this.typeDigitOrMode}\n          onBackspace={this.didTypeBackspace}\n          onNext={this.next}\n          canAddAddressingMode={!cursor.isMidOperand}\n          canNext={currentOperandIsValid(this.props)}\n          isEndOfLine={cursor.token === Token.Operand2}\n        />\n      );\n    }\n\n    let showOtherButton = undefined;\n    if (this.props.enemyCodeExists) {\n      showOtherButton = (\n        <button onClick={this.showOtherCode} id=\"show-other\">\n          {isOwnCode ? \"enemy code\" : \"my code\"}\n        </button>\n      );\n    }\n\n    const valid = this.codeIsValid();\n\n    const emojiRow = <EmojiKeyboard onKeyPress={this.typeDigitOrMode} />;\n\n    return (\n      <div className=\"editor\">\n        <CodeView\n          code={code}\n          currentLine={cursor.line}\n          currentToken={cursor.token}\n          onLineClick={this.clickLine}\n          onTokenClick={this.clickToken}\n        />\n        <button\n          onClick={this.switchToDebug}\n          className={valid ? \"\" : \"disabled\"}\n          id=\"show-debug\"\n        >\n          debug\n        </button>\n        {showOtherButton}\n        <div id=\"logo\">omega</div>\n        {isOwnCode ? emojiRow : undefined}\n        {isOwnCode ? keyboard : undefined}\n      </div>\n    );\n  }\n\n  switchToDebug = () => {\n    if (!this.codeIsValid()) return;\n    this.props.dispatch(switchToDebugAction());\n  };\n\n  showOtherCode = () => {\n    this.props.dispatch(toggleWhoseCodeAction());\n  };\n\n  clickLine = (line: number) => {\n    this.props.dispatch(setCursorAction(line, undefined));\n  };\n\n  clickToken = (line: number, token: number) => {\n    console.log(\"Click token\");\n    this.props.dispatch(setCursorAction(line, token));\n  };\n\n  typeOpcode = (k: string) => {\n    this.props.dispatch(typeOpcodeAction(k));\n  };\n\n  typeDigitOrMode = (d: string) => {\n    // '-' isn't an addressing mode, but our term 'mode' here is wrong\n    // It really just means \"a non-digit symbol that isn't a label or math that can be at the start of an operand\"\n    let action: Action<string>;\n    if (parseInt(d, 10).toString() === d) {\n      action = typeOperandDigitAction(parseInt(d));\n    } else if (!_.isUndefined(addressingModeValue(d))) {\n      action = typeOperandModeAction(addressingModeValue(d));\n    } else if (d === \"-\") {\n      action = typeOperandLabelAction(d);\n    } else {\n      action = typeOperandLabelAction(d);\n    }\n    // TODO: Math\n\n    this.props.dispatch(action);\n  };\n\n  next = () => {\n    this.props.dispatch(nextWordAction());\n  };\n\n  didTypeBackspace = () => {\n    this.props.dispatch(backspaceAction());\n  };\n\n  // TODO: This might get more complicated, should probably be extracted somewhere\n  codeIsValid = (): boolean => {\n    const nonEmptyLines = this.props.code.filter(l => {\n      const actualTokens = l.filter(t => t !== undefined);\n      return actualTokens.length > 0;\n    });\n\n    const invalid = nonEmptyLines.find(l => {\n      return (l.length > 0 && _.isUndefined(l[1])) || _.isUndefined(l[2]);\n    });\n    if (invalid) return false;\n    return true;\n  };\n}\n","import React, { Reducer } from \"react\";\nimport \"./App.css\";\nimport { Dispatch, createReducerAndState } from \"./reducer\";\nimport { State, UIMode } from \"./State\";\nimport { Action, debugTickAction } from \"./Action\";\nimport { DebugView } from \"./components/DebugView\";\nimport { EditorView } from \"./components/EditorView\";\n\n// const program = \"MOV 0, 1\";\n\n// TODO: EQU needs to not occupy memory space.\n// Then, MOV ptr, ptr and ADD #const, ptr are something to debug.\n\n// const program = `const EQU 2365\n// loc MOV ptr, ptr\n// ADD #const, ptr\n// SUB #const, loc\n// JMP loc\n// ptr JMP @0, trap\n// trap SPL 1, -100\n// MOV bomb, <-1\n// JMP trap\n// bomb DAT #0`;\n\nconst vampire = `const EQU 2365\nloc MOV ptr, ptr\nADD #const, ptr\nSUB #const, loc\nJMP loc\nptr JMP @0, trap\ntrap SPL 1, -100\nMOV bomb, <-1\nJMP trap\nbomb DAT #0`;\n\n// const imp = \"MOV 0, 1\";\n\n// const bomb = `ADD #4, 3\n// MOV 2, @2\n// JMP -2\n// DAT #0, #0`;\n\n// const program = `DAT 0\n// DAT 99\n// MOV @-2, @-1\n// CMP -3,\t#9\n// JMP 4\n// ADD #1, -5\n// ADD #1, -5\n// JMP -5\n// MOV #99, 93\n// JMP 93\n\n// END\tstart`;\n\nclass App extends React.Component<{}, State> {\n  state: State;\n  reducer: Reducer<State, Action<any>>;\n\n  timer?: number;\n\n  constructor(props: {}) {\n    super(props);\n\n    const { state, reducer } = createReducerAndState(\"MOV 0, 1\", undefined);\n    this.state = state;\n    this.reducer = reducer;\n  }\n\n  componentDidUpdate() {\n    if (this.state.isPlaying && !this.timer) {\n      const tick = () => {\n        this.dispatch(debugTickAction());\n\n        if (this.state.isPlaying && this.state.playRate) {\n          this.timer = (setTimeout(\n            tick,\n            this.state.playRate\n          ) as unknown) as number;\n        } else {\n          this.timer = undefined;\n        }\n      };\n      tick();\n    }\n  }\n\n  render() {\n    if (this.state.uiMode === UIMode.Editor) {\n      return (\n        <EditorView\n          dispatch={this.dispatch}\n          code={this.state.editingCode}\n          cursor={this.state.cursor}\n          isOwnCode={this.state.viewingOwnCode}\n          enemyCodeExists={this.state.enemyCode !== undefined}\n        />\n      );\n    } else if (this.state.uiMode === UIMode.Debug) {\n      return (\n        <DebugView\n          code={this.state.code}\n          dispatch={this.dispatch}\n          memory={this.state.memory}\n          warriors={this.state.warriors}\n          nextPC={this.state.nextPC}\n          isPaused={!this.state.isPlaying}\n          isAtStart={this.state.debugTicks === 0}\n        />\n      );\n    } else {\n      console.log(`Unknown UI mode: ${this.state.uiMode}`);\n      return <div />;\n    }\n  }\n\n  dispatch: Dispatch = (action: Action<any>) => {\n    console.log(\"Dispatching\", action);\n    this.setState(this.reducer(this.state, action));\n  };\n}\n\nexport default App;\n","import {\n  State,\n  initialState,\n  codeStringToCode,\n  UIMode,\n  codeToString,\n  Token,\n  ValidEmoji,\n  EmojiNames\n} from \"./State\";\nimport { Action, ActionType, debugRestartAction } from \"./Action\";\nimport _ from \"lodash\";\nimport { Reducer } from \"react\";\nimport { Instruction, VM, parse } from \"corewars-js\";\nimport { Levels } from \"./Level\";\nimport { Line } from \"./Line\";\n\nexport type Dispatch = (action: Action<any>) => void;\n\ninterface ReducerAndState {\n  state: State;\n  reducer: Reducer<State, Action<any>>;\n}\n\nexport function createReducerAndState(\n  rawCode: string,\n  enemyCode?: string,\n  size: number = 80\n): ReducerAndState {\n  // TODO: Should this live in State instead of this closure?\n  let programs: Instruction[][] = [];\n\n  const generatePrograms = (playerCode: string) => {\n    console.log(playerCode);\n    console.log(\"---\");\n    console.log(enemyCode);\n    let codes = [playerCode];\n    if (enemyCode !== undefined) {\n      codes.push(enemyCode);\n    }\n\n    programs = codes\n      .map(c => {\n        for (let i = 0; i < ValidEmoji.length; i++) {\n          c = c.replace(ValidEmoji[i], EmojiNames[i]);\n        }\n        return c;\n      })\n      .map(parse);\n  };\n\n  generatePrograms(rawCode);\n\n  let vm = new VM(_.cloneDeep(programs), size);\n\n  const code = codeStringToCode(rawCode);\n\n  let otherCode: Line[] | undefined;\n  if (enemyCode !== undefined) {\n    otherCode = codeStringToCode(enemyCode);\n  }\n\n  const s = initialState({\n    code,\n    enemyCode: otherCode,\n    editingCode: code,\n    viewingOwnCode: true,\n    memory: vm.memory,\n    warriors: vm.warriors,\n    debugStartPositions: vm.warriors.map(w => w.pc[0]),\n    nextPC: vm.warriors[0].pc[0],\n    activeLevel: Levels[0]\n  });\n\n  console.log(vm.equs);\n\n  const reducer = (state: State, action: Action<any>): State => {\n    const newState = _.cloneDeep(state);\n\n    const { cursor, code } = newState;\n    const line = code[cursor.line] || [];\n\n    if (action.type === ActionType.TypeOpcode) {\n      if (cursor.token !== Token.Opcode) {\n        return state;\n      }\n\n      if (cursor.token === undefined) {\n        newState.code[cursor.line] = [action.value];\n      } else {\n        line[Token.Opcode] = action.value;\n      }\n\n      cursor.token += 1;\n      cursor.isMidOperand = false;\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandDigit) {\n      if (cursor.token !== Token.Operand1 && cursor.token !== Token.Operand2) {\n        return state;\n      }\n\n      if (!line) return state;\n\n      if (cursor.isMidOperand) {\n        // If you JUST typed in this operand, keep going\n        line[cursor.token] = (line[cursor.token] || \"\") + action.value;\n      } else {\n        // Otherwise, overwrite the whole operand\n        line[cursor.token] = action.value;\n        cursor.isMidOperand = true;\n      }\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandLabel) {\n      if (cursor.token === undefined) {\n        return state;\n      }\n      if (!line) return state;\n\n      if (cursor.token === Token.Label || cursor.token === Token.Opcode) {\n        if (line[Token.Label] === action.value) {\n          line[Token.Label] = undefined;\n        } else {\n          line[Token.Label] = action.value;\n        }\n      } else {\n        // TODO: This should probably be a discrete action\n        if (action.value === \"-\" && !cursor.isMidOperand) {\n          line[cursor.token] = action.value;\n          cursor.isMidOperand = true;\n        } else if (cursor.isMidOperand) {\n          line[cursor.token] = (line[cursor.token] || \"\") + action.value;\n          cursor.isMidOperand = true;\n        } else {\n          line[cursor.token] = action.value;\n          cursor.isMidOperand = true;\n        }\n      }\n\n      return newState;\n    } else if (action.type === ActionType.TypeOperandMode) {\n      if (cursor.token !== Token.Operand1 && cursor.token !== Token.Operand2) {\n        return state;\n      }\n      if (!line) return state;\n      if (cursor.isMidOperand) return state;\n      line[cursor.token] = action.value;\n      cursor.isMidOperand = true;\n\n      return newState;\n    } else if (action.type === ActionType.NextWord) {\n      cursor.isMidOperand = false;\n\n      if (cursor.token === undefined) {\n        cursor.line = cursor.line + 1;\n        if (!code[cursor.line]) {\n          code.push([undefined, undefined, undefined, undefined]);\n        }\n\n        if (!code[cursor.line + 1]) {\n          code.push([undefined, undefined, undefined, undefined]);\n        }\n        return newState;\n      } else if (line[cursor.token]) {\n        if (cursor.token === Token.Operand1) {\n          line[cursor.token] += \",\";\n          cursor.token = Token.Operand2;\n          return newState;\n        } else if (cursor.token === Token.Operand2) {\n          cursor.token = Token.Opcode;\n          cursor.line = cursor.line + 1;\n\n          if (!code[cursor.line]) {\n            code.push([undefined, undefined, undefined, undefined]);\n          }\n\n          if (!code[cursor.line + 1]) {\n            code.push([undefined, undefined, undefined, undefined]);\n          }\n\n          return newState;\n        }\n      }\n      return state;\n    } else if (action.type === ActionType.SetCursor) {\n      newState.cursor = action.value;\n      return newState;\n    } else if (action.type === ActionType.Backspace) {\n      if (cursor.token === undefined) {\n        newState.code.splice(cursor.line, 1);\n        if (cursor.line > 0) {\n          cursor.line -= 1;\n        }\n        return newState;\n      }\n\n      const token = line[cursor.token];\n\n      // TODO: Handle labels\n      if (cursor.token === Token.Opcode) {\n        // Opcode\n        if (cursor.line > 0) {\n          cursor.line -= 1;\n          cursor.token = Token.Operand2;\n        }\n        line[cursor.token] = undefined;\n        return newState;\n      } else {\n        // Operand\n        if (token && cursor.isMidOperand && token.length > 1) {\n          line[cursor.token] = token.slice(0, token.length - 1);\n        } else {\n          line[cursor.token] = undefined;\n          cursor.token -= 1;\n        }\n        return newState;\n      }\n    }\n\n    // Debugger actions\n    if (action.type === ActionType.DebugRestart) {\n      newState.isPlaying = false;\n\n      if (state.debugTicks === 0) {\n        vm = new VM(_.cloneDeep(programs), size);\n        newState.memory = vm.memory;\n        newState.warriors = vm.warriors;\n        newState.debugTicks = 0;\n        newState.debugStartPositions = vm.warriors.map(w => w.pc[0]);\n        newState.nextPC = vm.warriors[0].pc[0];\n      } else {\n        vm = new VM(\n          _.cloneDeep(programs),\n          size,\n          undefined,\n          newState.debugStartPositions\n        );\n\n        newState.memory = vm.memory;\n        newState.warriors = vm.warriors;\n        newState.winner = undefined;\n        newState.debugTicks = 0;\n        newState.nextPC = vm.warriors[0].pc[0];\n      }\n\n      return newState;\n    } else if (action.type === ActionType.DebugUndo) {\n      vm = new VM(\n        _.cloneDeep(programs),\n        size,\n        undefined,\n        newState.debugStartPositions\n      );\n\n      let nextPC: number = 0;\n      for (let i = 0; i < state.debugTicks - 1; i++) {\n        nextPC = vm.tick() || nextPC;\n      }\n\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n      newState.winner = undefined;\n      newState.debugTicks = state.debugTicks - 1;\n      newState.nextPC = nextPC;\n      return newState;\n    } else if (action.type === ActionType.DebugPauseOrStep) {\n      if (newState.isPlaying) {\n        newState.isPlaying = false;\n        return newState;\n      }\n\n      if (!_.isUndefined(state.winner)) {\n        console.log(\"Can't continue, game is over\");\n        return state;\n      }\n\n      const result = vm.tick();\n      if (_.isUndefined(result)) {\n        newState.winner = _.indexOf(vm.warriors, vm.winner());\n        newState.isPlaying = false;\n\n        const youWon = newState.winner === 0;\n        const text = youWon ? \"You won!\" : \"You lost.\";\n        alert(text);\n\n        return newState;\n      }\n\n      newState.nextPC = result;\n      console.log(vm.print());\n\n      if (newState.activeLevel) {\n        const won = newState.activeLevel.testWinCondition(\n          vm.memory,\n          vm.warriors\n        );\n        if (won) {\n          alert(\"WIN CONDITION MET\");\n          newState.isPlaying = false;\n        }\n      }\n\n      newState.debugTicks += 1;\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n\n      return newState;\n    } else if (action.type === ActionType.DebugTick) {\n      if (!newState.isPlaying) {\n        return state;\n      }\n\n      if (!_.isUndefined(state.winner)) {\n        console.log(\"Can't continue, game is over\");\n        return state;\n      }\n\n      const result = vm.tick();\n      if (_.isUndefined(result)) {\n        newState.winner = _.indexOf(vm.warriors, vm.winner());\n        newState.isPlaying = false;\n\n        const youWon = newState.winner === 0;\n        const text = youWon ? \"You won!\" : \"You lost.\";\n        alert(text);\n\n        return newState;\n      }\n\n      newState.nextPC = result;\n      // console.log(vm.print());\n\n      newState.debugTicks += 1;\n      newState.memory = vm.memory;\n      newState.warriors = vm.warriors;\n\n      return newState;\n    } else if (action.type === ActionType.DebugPlay) {\n      newState.isPlaying = true;\n      newState.playRate = 100;\n      return newState;\n    } else if (action.type === ActionType.DebugFast) {\n      newState.isPlaying = true;\n      newState.playRate = 5;\n      return newState;\n    } else if (action.type === ActionType.SwitchToDebug) {\n      generatePrograms(codeToString(state.code));\n      newState.uiMode = UIMode.Debug;\n      return reducer(newState, debugRestartAction());\n    } else if (action.type === ActionType.SwitchToEditor) {\n      newState.uiMode = UIMode.Editor;\n      return newState;\n    } else if (action.type === ActionType.ToggleWhoseCode) {\n      if (newState.viewingOwnCode && otherCode !== undefined) {\n        newState.editingCode = otherCode;\n      } else {\n        newState.editingCode = newState.code;\n      }\n\n      newState.cursor = {\n        line: 0,\n        token: 0,\n        isMidOperand: false\n      };\n\n      newState.viewingOwnCode = !newState.viewingOwnCode;\n      return newState;\n    }\n\n    return state;\n  };\n\n  return { state: s, reducer };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar _ = require(\"lodash\");\n\nvar VM =\n/** @class */\nfunction () {\n  function VM(programs, size, cycleLimit, startPositions) {\n    if (size === void 0) {\n      size = 8000;\n    }\n\n    this.cycles = 0;\n    this.nextProgramIndex = 0;\n    this.labels = {};\n    this.equs = {};\n    this.memory = [];\n    this.warriors = [];\n    this.programs = programs;\n    this.size = size;\n    this.cycleLimit = cycleLimit;\n    var emptyInstruction = {\n      opcode: types_1.Opcode.DAT,\n      aMode: types_1.AddressingMode.Immediate,\n      aField: 0,\n      bMode: types_1.AddressingMode.Immediate,\n      bField: 0\n    };\n\n    for (var i = 0; i < size; i++) {\n      this.memory[i] = Object.assign({}, emptyInstruction);\n    }\n\n    var positions;\n\n    if (startPositions && startPositions.length === programs.length) {\n      positions = startPositions;\n    } else {\n      var maybePositions = this.findStartPositions(programs, size);\n\n      if (maybePositions === null) {\n        console.log(\"Could not assign positions\");\n        return;\n      }\n\n      positions = maybePositions;\n    }\n\n    var startOffsets = []; // Copy programs to memory\n\n    for (var i = 0; i < programs.length; i++) {\n      var program = programs[i];\n      var start = positions[i];\n      startOffsets[i] = 0;\n      var indexOffset = 0; // Since we skip some instructions, but use the for loop index for positioning.\n\n      for (var j = 0; j < program.length; j++) {\n        var absoluteAddr = normalizedIndex(start + j + indexOffset, size);\n        var instruction = program[j];\n        instruction.owner = i;\n\n        if (instruction.opcode === types_1.Opcode.END) {\n          if (instruction.aField && this.labels[instruction.aField]) {\n            positions[i] = this.labels[instruction.aField];\n          }\n\n          break;\n        }\n\n        if (instruction.opcode === types_1.Opcode.EQU) {\n          if (instruction.label) {\n            this.equs[instruction.label] = instruction.aField;\n          }\n\n          indexOffset -= 1;\n          continue;\n        }\n\n        this.memory[absoluteAddr] = instruction;\n\n        if (instruction.label) {\n          this.labels[instruction.label] = absoluteAddr;\n        } // UH OH\n        // This is not part of the ICWS-88 spec (there's some faffing around with an EQU at the end of the program instead)\n        // Too bad for now, this is helpful to me for my game.\n\n\n        if (instruction.label === \"start\") {\n          startOffsets[i] = absoluteAddr - start;\n        }\n      }\n    }\n\n    this.warriors = positions.map(function (pc, idx) {\n      return {\n        number: idx,\n        pc: [pc + startOffsets[idx]]\n      };\n    });\n  }\n  /** Iterates the CPU one cycle\n   * Returns the next absolute address that will execute, or undefined if the game is over\n   */\n\n\n  VM.prototype.tick = function () {\n    var warrior = this.warriors[this.nextProgramIndex];\n\n    if (!warrior) {\n      console.log(\"Warning: couldn't execute program\");\n      return undefined;\n    }\n\n    this.execute(warrior);\n\n    if (warrior.pc.length === 0) {\n      console.log(\"Game over: player \" + warrior.number + \" bombed!\");\n      return undefined;\n    }\n\n    this.cycles++;\n\n    if (this.cycleLimit && this.cycles > this.cycleLimit) {\n      console.log(\"Game over: draw!\");\n      return undefined;\n    }\n\n    this.nextProgramIndex += 1;\n\n    if (this.nextProgramIndex >= this.warriors.length) {\n      this.nextProgramIndex = 0;\n    }\n\n    return this.warriors[this.nextProgramIndex].pc[0];\n  };\n\n  VM.prototype.winner = function () {\n    var aliveWarriors = this.warriors.filter(function (w) {\n      return w.pc.length > 0;\n    });\n\n    if (aliveWarriors.length === 1) {\n      return aliveWarriors[0];\n    }\n\n    return undefined;\n  };\n\n  VM.prototype.print = function () {\n    var output = [];\n    output.push(\"CYCLE \" + this.cycles);\n\n    for (var _i = 0, _a = this.warriors; _i < _a.length; _i++) {\n      var warrior = _a[_i];\n      output.push(\"Process Queue: [\" + warrior.pc + \"]\");\n\n      for (var i = -5; i < 15; i++) {\n        var index = normalizedIndex(warrior.pc[0] + i, this.size);\n        var instr = index + \": \" + printInstruction(this.memory[index]);\n\n        if (i === 0) {\n          instr += \" <-- \" + warrior.number;\n        }\n\n        output.push(instr);\n      }\n    }\n\n    output.push(\"\");\n    return output.join(\"\\n\");\n  };\n\n  VM.prototype.findStartPositions = function (programs, size) {\n    /** TODO: Very silly.\n     * Current design goals:\n     * As far away from each other as currently possible.\n     * e.g. we calculate how much non-program space there will be, and aim to put them somewhere equidistant.\n     */\n    var totalProgramSize = _.flatten(programs).length;\n\n    var desiredGap = Math.floor((size - totalProgramSize) / 2);\n\n    var startingPosition = _.random(0, size);\n\n    return programs.map(function (_, idx) {\n      return (startingPosition + idx * desiredGap) % size;\n    });\n  };\n\n  VM.prototype.execute = function (warrior) {\n    var pc = warrior.pc.shift();\n    var instruction = this.memory[pc];\n    var opcode = instruction.opcode,\n        aMode = instruction.aMode,\n        aField = instruction.aField,\n        bMode = instruction.bMode,\n        bField = instruction.bField;\n    var aAddr = this.evaluateOperand(pc, aMode, aField, this.size);\n    var bAddr = this.evaluateOperand(pc, bMode, bField, this.size);\n    var a = this.memory[aAddr];\n    var b = this.memory[bAddr];\n    instruction.owner = warrior.number;\n    var shouldIncrement = true;\n\n    switch (opcode) {\n      case types_1.Opcode.ADD:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          return; // TODO: Invalid\n        }\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) + aAddr, this.size);\n          b.owner = warrior.number;\n        } else {\n          b.aField = normalizedIndex(this.evaluateField(bAddr, b.aField) + aAddr, this.size);\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) + bAddr, this.size);\n          b.owner = warrior.number;\n        }\n\n        break;\n\n      case types_1.Opcode.CMP:\n        // TODO: CMP X, #X\n        if (aMode === types_1.AddressingMode.Immediate) {\n          if (aField === b.bField) {\n            warrior.pc.push(pc + 2);\n            shouldIncrement = false;\n          }\n        } else {\n          // TODO: Test this — I assume equality doesn't actually work?\n          if (a === b) {\n            warrior.pc.push(pc + 2);\n            shouldIncrement = false;\n          }\n        }\n\n        break;\n\n      case types_1.Opcode.DAT:\n        // Don't do anything, just let the process die\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.DJN:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          // TODO: Invalid\n          break;\n        }\n\n        b.bField = this.evaluateField(bAddr, b.bField) - 1;\n        b.owner = warrior.number;\n\n        if (b.bField === 0 && aMode != types_1.AddressingMode.Immediate) {\n          warrior.pc.push(a.aField);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.MOV:\n        if (aMode === types_1.AddressingMode.Immediate || bMode === types_1.AddressingMode.Immediate) {\n          b.bField = aAddr;\n          b.owner = warrior.number;\n        } else {\n          this.memory[bAddr] = __assign({}, a);\n\n          if (a.label) {\n            this.labels[a.label] = bAddr;\n          }\n        }\n\n        break;\n\n      case types_1.Opcode.JMP:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        warrior.pc.push(aAddr);\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.JMZ:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        if (b.bField === 0) {\n          warrior.pc.push(aAddr);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.JMZ:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        if (b.bField !== 0) {\n          warrior.pc.push(aAddr);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.SPL:\n        if (aMode === types_1.AddressingMode.Immediate) {\n          break;\n        }\n\n        warrior.pc.push(pc + 1);\n        warrior.pc.push(aAddr);\n        shouldIncrement = false;\n        break;\n\n      case types_1.Opcode.SLT:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          // TODO: Spec disallows this, but I kinda like it\n          break;\n        }\n\n        var compareValue;\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          compareValue = aField;\n        } else {\n          compareValue = a.aField;\n        }\n\n        if (compareValue < b.bField) {\n          warrior.pc.push(pc + 2);\n          shouldIncrement = false;\n        }\n\n        break;\n\n      case types_1.Opcode.SUB:\n        if (bMode === types_1.AddressingMode.Immediate) {\n          return; // TODO: Invalid\n        }\n\n        if (aMode === types_1.AddressingMode.Immediate) {\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) - aAddr, this.size);\n          b.owner = warrior.number;\n        } else {\n          b.aField = normalizedIndex(this.evaluateField(bAddr, b.aField) - aAddr, this.size);\n          b.bField = normalizedIndex(this.evaluateField(bAddr, b.bField) - bAddr, this.size);\n          b.owner = warrior.number;\n        }\n\n        break;\n    }\n\n    if (shouldIncrement) {\n      warrior.pc.push(normalizedIndex(pc + 1, this.size));\n    }\n  };\n  /** Takes a given operand and returns an actual numeric value\n   *  If mode is .Immediate, this will be a raw value.\n   *  Otherwise, it will be an absolute address.\n   *  If mode is .Autoincrement, this will mutate memory.\n   */\n\n\n  VM.prototype.evaluateOperand = function (pc, mode, field, size) {\n    if (typeof field === \"number\") {\n      if (mode === types_1.AddressingMode.Immediate) {\n        return field;\n      }\n\n      var absoluteAddr = normalizedIndex(field + pc, size);\n\n      if (mode === types_1.AddressingMode.Direct) {\n        return absoluteAddr;\n      }\n\n      var value = this.evaluateField(absoluteAddr, this.memory[absoluteAddr].bField);\n\n      if (mode === types_1.AddressingMode.Autodecrement) {\n        value -= 1;\n        this.memory[absoluteAddr].bField = value;\n      }\n\n      absoluteAddr += value;\n      return normalizedIndex(absoluteAddr, this.size);\n    } else {\n      var evaluatedField = this.evaluateField(pc, field);\n      return this.evaluateOperand(pc, mode, evaluatedField, size);\n    }\n  };\n  /** Takes a given field and normalizes it into a relative address number.\n   *  It (1) performs label/equ lookups and (2) evaluates math operations.\n   *  It does NOT actually resolve that number to an absolute address\n   */\n  // TODO: This returns -1 if it fails. It should fail more noisily\n\n\n  VM.prototype.evaluateField = function (absoluteAddr, field) {\n    var isMathExpression = function isMathExpression(x) {\n      return x.operator !== undefined;\n    };\n\n    if (typeof field === \"number\") {\n      return field;\n    } else if (isMathExpression(field)) {\n      var left = this.evaluateField(absoluteAddr, field.left);\n      var right = this.evaluateField(absoluteAddr, field.right);\n\n      if (_.isUndefined(left) || _.isUndefined(right)) {\n        return -1;\n      }\n\n      switch (field.operator) {\n        case types_1.MathOperator.Add:\n          return left + right;\n\n        case types_1.MathOperator.Subtract:\n          return left - right;\n\n        case types_1.MathOperator.Multiply:\n          return left * right;\n\n        case types_1.MathOperator.Divide:\n          return left / right;\n      }\n\n      return -1;\n    } else if (typeof field === \"string\") {\n      if (this.labels[field] != undefined) {\n        return this.labels[field] - absoluteAddr;\n      } else if (this.equs[field] != undefined) {\n        return this.equs[field];\n      } else {\n        // TODO: Should this throw?\n        console.log(\"FATAL ERROR: could not find label '\" + field + \"'\");\n        return -1;\n      }\n    } else {\n      return -1;\n    }\n  };\n\n  return VM;\n}();\n\nexports.VM = VM;\n\nfunction normalizedIndex(index, size) {\n  var newIndex = index;\n\n  while (newIndex < 0) {\n    newIndex = size + newIndex;\n  }\n\n  return newIndex % size;\n}\n\nfunction addressingModeAsString(mode) {\n  switch (mode) {\n    case types_1.AddressingMode.Direct:\n      return \"\";\n\n    case types_1.AddressingMode.Immediate:\n      return \"#\";\n\n    case types_1.AddressingMode.Indirect:\n      return \"@\";\n\n    case types_1.AddressingMode.Autodecrement:\n      return \">\";\n  }\n}\n\nfunction mathOperatorAsString(operator) {\n  switch (operator) {\n    case types_1.MathOperator.Add:\n      return \"+\";\n\n    case types_1.MathOperator.Subtract:\n      return \"-\";\n\n    case types_1.MathOperator.Multiply:\n      return \"*\";\n\n    case types_1.MathOperator.Divide:\n      return \"/\";\n  }\n}\n\nfunction printInstruction(instruction) {\n  var str = exports.printOpcode(instruction) + \" \" + exports.printOperandA(instruction) + \", \" + exports.printOperandB(instruction);\n\n  if (instruction.label) {\n    return instruction.label + \" \" + str;\n  } else {\n    return str;\n  }\n}\n\nexports.printInstruction = printInstruction;\n\nexports.printOpcode = function (instruction) {\n  return types_1.Opcode[instruction.opcode];\n};\n\nexports.printOperand = function (mode, value) {\n  return \"\" + addressingModeAsString(mode) + printOperandVal(value);\n};\n\nexports.printOperandA = function (instruction) {\n  return exports.printOperand(instruction.aMode, instruction.aField);\n};\n\nexports.printOperandB = function (instruction) {\n  return exports.printOperand(instruction.bMode, instruction.bField);\n};\n\nvar printOperandVal = function printOperandVal(operand) {\n  if (typeof operand == \"string\") {\n    return operand;\n  } else if (typeof operand == \"number\") {\n    return \"\" + operand;\n  } else {\n    return \"\" + printOperandVal(operand.left) + mathOperatorAsString(operand.operator) + printOperandVal(operand.right);\n  }\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar AddressingMode;\n\n(function (AddressingMode) {\n  AddressingMode[AddressingMode[\"Direct\"] = 0] = \"Direct\";\n  AddressingMode[AddressingMode[\"Immediate\"] = 1] = \"Immediate\";\n  AddressingMode[AddressingMode[\"Indirect\"] = 2] = \"Indirect\";\n  AddressingMode[AddressingMode[\"Autodecrement\"] = 3] = \"Autodecrement\"; // TODO: Distinguish between 86 and 88 (and 94?)\n})(AddressingMode = exports.AddressingMode || (exports.AddressingMode = {}));\n\nvar Opcode;\n\n(function (Opcode) {\n  Opcode[Opcode[\"DAT\"] = 0] = \"DAT\";\n  Opcode[Opcode[\"MOV\"] = 1] = \"MOV\";\n  Opcode[Opcode[\"ADD\"] = 2] = \"ADD\";\n  Opcode[Opcode[\"SUB\"] = 3] = \"SUB\";\n  Opcode[Opcode[\"JMZ\"] = 4] = \"JMZ\";\n  Opcode[Opcode[\"JMN\"] = 5] = \"JMN\";\n  Opcode[Opcode[\"JMP\"] = 6] = \"JMP\";\n  Opcode[Opcode[\"DJN\"] = 7] = \"DJN\";\n  Opcode[Opcode[\"CMP\"] = 8] = \"CMP\";\n  Opcode[Opcode[\"SPL\"] = 9] = \"SPL\";\n  Opcode[Opcode[\"SLT\"] = 10] = \"SLT\";\n  Opcode[Opcode[\"EQU\"] = 11] = \"EQU\";\n  Opcode[Opcode[\"END\"] = 12] = \"END\";\n})(Opcode = exports.Opcode || (exports.Opcode = {}));\n\nvar MathOperator;\n\n(function (MathOperator) {\n  MathOperator[MathOperator[\"Add\"] = 0] = \"Add\";\n  MathOperator[MathOperator[\"Divide\"] = 1] = \"Divide\";\n  MathOperator[MathOperator[\"Subtract\"] = 2] = \"Subtract\";\n  MathOperator[MathOperator[\"Multiply\"] = 3] = \"Multiply\";\n})(MathOperator = exports.MathOperator || (exports.MathOperator = {}));\n\nexports.instructionToString = function (instruction) {\n  var _a;\n\n  var label = instruction.label,\n      opcode = instruction.opcode,\n      aMode = instruction.aMode,\n      aField = instruction.aField,\n      bMode = instruction.bMode,\n      bField = instruction.bField;\n  var mode = (_a = {}, _a[AddressingMode.Direct] = \"\", _a[AddressingMode.Immediate] = \"#\", _a[AddressingMode.Indirect] = \"@\", _a[AddressingMode.Autodecrement] = \"<\", _a);\n  var str = Opcode[opcode] + \" \" + mode[aMode] + aField + \", \" + mode[bMode] + \" \" + bField;\n\n  if (label) {\n    str = label + \" \" + str;\n  }\n\n  return str;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar ohm = require(\"ohm-js\");\n\nvar grammarText = \"\\nProgram {\\n\\n  Program = Instruction+\\n  \\n  Instruction \\n   = label opcode Operand (\\\",\\\" Operand)? comment? -- label\\n   | opcode Operand (\\\",\\\" Operand)? comment? -- nolabel\\n   | comment -- commentonly\\n  \\n  label\\n      = word\\n  \\n  opcode\\n      = \\\"DAT\\\"\\n      | \\\"MOV\\\"\\n      | \\\"ADD\\\"\\n      | \\\"SUB\\\"\\n      | \\\"JMZ\\\"\\n      | \\\"JMN\\\"\\n      | \\\"JMP\\\"\\n      | \\\"DJN\\\"\\n      | \\\"CMP\\\"\\n      | \\\"SPL\\\"\\n      | \\\"SLT\\\"\\n      | \\\"EQU\\\"\\n      | \\\"END\\\"\\n      | \\\"dat\\\"\\n      | \\\"mov\\\"\\n      | \\\"add\\\"\\n      | \\\"sub\\\"\\n      | \\\"jmz\\\"\\n      | \\\"jmn\\\"\\n      | \\\"jmp\\\"\\n      | \\\"djn\\\"\\n      | \\\"cmp\\\"\\n      | \\\"spl\\\"\\n      | \\\"slt\\\"\\n      | \\\"equ\\\"\\n      | \\\"end\\\"    \\n  \\n  \\n  Operand\\n      = addressingMode? OperandValue\\n  \\n  OperandValue = AddExp | OperandValue\\n  \\n  AddExp\\n      = AddExp \\\"+\\\" MulExp  -- plus\\n      | AddExp \\\"-\\\" MulExp  -- minus\\n      | MulExp\\n  \\n  MulExp\\n      = MulExp \\\"*\\\" operandLiteral  -- times\\n      | MulExp \\\"/\\\" operandLiteral  -- divide\\n      | operandLiteral\\n  \\n  operandLiteral = number | label\\n  \\n  addressingMode = \\\"$\\\" | \\\"#\\\" | \\\"@\\\" | \\\"<\\\"\\n  \\n  comment = \\\";\\\" (~lineTerminator any)*\\n  \\n  word = alnum+\\n  \\n  number = \\\"-\\\"? digit+\\n  \\n  lineTerminator = \\\"\\\\n\\\" | \\\"\\\\r\\\" | \\\"\\\\u2028\\\" | \\\"\\\\u2029\\\"\\n  \\n  }\";\nexports.grammar = ohm.grammar(grammarText);\nexports.semantics = exports.grammar.createSemantics();\n\nfunction parse(text) {\n  var parsed = exports.grammar.match(text);\n  return exports.semantics(parsed).asMarsJSObject();\n}\n\nexports.parse = parse;\nexports.semantics.addOperation(\"asMarsJSObject\", {\n  Program: function Program(instructions) {\n    return instructions.children.map(function (i) {\n      return i.asMarsJSObject();\n    }).filter(function (i) {\n      return i != undefined;\n    });\n  },\n  Instruction_label: function Instruction_label(label, opcode, a, _, b, comment) {\n    var aResult = a.asMarsJSObject();\n    var bResult = b.asMarsJSObject()[0] || {\n      addressingMode: types_1.AddressingMode.Direct,\n      field: 0\n    };\n    var result = {\n      label: label.asMarsJSObject(),\n      opcode: opcode.asMarsJSObject(),\n      aMode: aResult.addressingMode,\n      aField: aResult.field,\n      bMode: bResult.addressingMode,\n      bField: bResult.field\n    };\n    var c = comment.asMarsJSObject()[0];\n\n    if (c) {\n      result[\"comment\"] = c;\n    }\n\n    return result;\n  },\n  Instruction_nolabel: function Instruction_nolabel(opcode, a, _, b, comment) {\n    var aResult = a.asMarsJSObject();\n    var bResult = b.asMarsJSObject()[0] || {\n      addressingMode: types_1.AddressingMode.Direct,\n      field: 0\n    };\n    var result = {\n      opcode: opcode.asMarsJSObject(),\n      aMode: aResult.addressingMode,\n      aField: aResult.field,\n      bMode: bResult.addressingMode,\n      bField: bResult.field\n    };\n    var c = comment.asMarsJSObject()[0];\n\n    if (c) {\n      result[\"comment\"] = c;\n    }\n\n    return result;\n  },\n  Instruction_commentonly: function Instruction_commentonly(_) {\n    return undefined;\n  },\n  Operand: function Operand(addressingMode, operandValue) {\n    var map = {\n      $: types_1.AddressingMode.Direct,\n      \"#\": types_1.AddressingMode.Immediate,\n      \"@\": types_1.AddressingMode.Indirect,\n      \"<\": types_1.AddressingMode.Autodecrement,\n      \"\": types_1.AddressingMode.Direct\n    };\n    return {\n      addressingMode: map[addressingMode.sourceString],\n      field: operandValue.asMarsJSObject()\n    };\n  },\n  OperandValue: function OperandValue(e) {\n    return e.asMarsJSObject();\n  },\n  AddExp: function AddExp(e) {\n    return e.asMarsJSObject();\n  },\n  AddExp_plus: function AddExp_plus(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Add,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  AddExp_minus: function AddExp_minus(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Subtract,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  MulExp_times: function MulExp_times(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Multiply,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  MulExp_divide: function MulExp_divide(left, _, right) {\n    return {\n      operator: types_1.MathOperator.Divide,\n      left: left.asMarsJSObject(),\n      right: right.asMarsJSObject()\n    };\n  },\n  operandLiteral: function operandLiteral(e) {\n    return e.asMarsJSObject();\n  },\n  opcode: function opcode(_opcode) {\n    return types_1.Opcode[_opcode.sourceString.toUpperCase()];\n  },\n  number: function number(minus, num) {\n    return parseInt(\"\" + minus.sourceString + num.sourceString);\n  },\n  label: function label(_label) {\n    return _label.sourceString;\n  },\n  comment: function comment(_, _comment) {\n    return _comment.sourceString;\n  }\n});","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./types\"));\n\nvar parser_1 = require(\"./parser\");\n\nexports.parse = parser_1.parse;\n\nvar mars_1 = require(\"./mars\");\n\nexports.VM = mars_1.VM;"],"sourceRoot":""}